"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ–±—É—á–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
"""

import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, List, Optional

from dotenv import load_dotenv
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
STATE_FILE = os.getenv('STATE_FILE', 'state.json')

# –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–æ–≤ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ scheduler_course)
from scheduler_course import HTML_CSS_LESSONS, JAVASCRIPT_LESSONS

class CourseHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∫—É—Ä—Å–∞"""
    
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN) if BOT_TOKEN else None
        self.current_index = self.load_index()
        
    def load_index(self) -> int:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞"""
        try:
            if os.path.exists(STATE_FILE):
                with open(STATE_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('lesson_index', 0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ —É—Ä–æ–∫–∞: {e}")
        return 0
    
    def save_index(self, index: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞"""
        try:
            data = {'lesson_index': index, 'last_updated': datetime.now().isoformat()}
            with open(STATE_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —É—Ä–æ–∫–∞: {e}")
    
    def make_lesson(self, idx: int) -> Dict[str, str]:
        """–°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Ä–æ–∫–∞ (HTML/CSS –∏–ª–∏ JavaScript)
        lesson_type = "HTML/CSS" if (idx // len(HTML_CSS_LESSONS)) % 2 == 0 else "JavaScript"
        
        if lesson_type == "HTML/CSS":
            lesson_data = HTML_CSS_LESSONS[idx % len(HTML_CSS_LESSONS)]
            lesson_num = (idx % len(HTML_CSS_LESSONS)) + 1
        else:
            lesson_data = JAVASCRIPT_LESSONS[idx % len(JAVASCRIPT_LESSONS)]
            lesson_num = (idx % len(JAVASCRIPT_LESSONS)) + 1
        
        return {
            'title': f"–£—Ä–æ–∫ {idx + 1}. {lesson_data['title']}",
            'text': lesson_data['theory'],
            'hw': lesson_data['homework'],
            'type': lesson_type
        }
    
    async def send_lesson(self, chat_id: str, lesson_index: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ä–æ–∫ –≤ —á–∞—Ç"""
        if not self.bot:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN")
            return False
        
        try:
            lesson = self.make_lesson(lesson_index)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                f"üìö <b>{lesson['title']}</b>\n\n"
                f"üí° <b>–¢–µ–æ—Ä–∏—è:</b>\n{lesson['text']}\n\n"
                f"üìù <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n{lesson['hw']}\n\n"
                f"‚úÖ <b>–°–¥–∞—ë–º –î–ó:</b> –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ\n\n"
                f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {lesson['type']}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y')}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                    url="https://t.me/vadzim_belarus"
                )],
                [InlineKeyboardButton(
                    "üìö –í—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞",
                    url="https://t.me/learncoding_team"
                )],
                [InlineKeyboardButton(
                    "üåê –°–∞–π—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                    url="https://vadzim.by"
                )],
                [InlineKeyboardButton(
                    "üìñ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫",
                    callback_data=f"next_lesson_{lesson_index + 1}"
                )]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await self.bot.pin_chat_message(chat_id=chat_id, message_id=message.message_id)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            except TelegramError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
            self.save_index(lesson_index + 1)
            
            logger.info(f"–£—Ä–æ–∫ {lesson_index + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞: {e}")
            return False
    
    async def send_welcome_message(self, chat_id: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π"""
        if not self.bot:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN")
            return False
        
        try:
            welcome_text = (
                "üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!</b>\n\n"
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ HTML, CSS –∏ JavaScript.\n\n"
                "üìö <b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>\n"
                "‚Ä¢ 11 –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ —Å —Ç–µ–æ—Ä–∏–µ–π –∏ –ø—Ä–∞–∫—Ç–∏–∫–æ–π\n"
                "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
                "‚Ä¢ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–Ω—Ç–æ—Ä–∞\n\n"
                "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫."
            )
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "üéì –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                    callback_data="start_course"
                )],
                [InlineKeyboardButton(
                    "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º",
                    url="https://t.me/vadzim_belarus"
                )],
                [InlineKeyboardButton(
                    "üåê –°–∞–π—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                    url="https://vadzim.by"
                )]
            ])
            
            message = await self.bot.send_message(
                chat_id=chat_id,
                text=welcome_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await self.bot.pin_chat_message(chat_id=chat_id, message_id=message.message_id)
                logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            except TelegramError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
course_handler = CourseHandler()

async def course_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /course"""
    try:
        chat_id = str(update.effective_chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
        if chat_id != CHAT_ID:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ @learncoding_team"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = await course_handler.send_welcome_message(chat_id)
        
        if success:
            await update.message.reply_text(
                "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.first_name}")
        
        await query.answer()
        
        chat_id = str(update.effective_chat.id)
        logger.info(f"Chat ID: {chat_id}, –æ–∂–∏–¥–∞–µ–º—ã–π: {CHAT_ID}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
        if chat_id != CHAT_ID:
            logger.warning(f"Callback –∏–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã: {chat_id}")
            await query.edit_message_text(
                "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ @learncoding_team"
            )
            return
        
        if query.data == "start_course":
            logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º start_course")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
            success = await course_handler.send_lesson(chat_id, course_handler.current_index)
            
            if success:
                await query.edit_message_text(
                    "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
            else:
                await query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        
        elif query.data.startswith("next_lesson_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {query.data}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            lesson_index = int(query.data.split("_")[2])
            success = await course_handler.send_lesson(chat_id, lesson_index)
            
            if success:
                await query.edit_message_text(
                    f"–£—Ä–æ–∫ {lesson_index + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
            else:
                await query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def setup_course_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∫—É—Ä—Å–∞"""
    application.add_handler(CommandHandler("course", course_start_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∫—É—Ä—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

async def send_welcome_to_group():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    if not BOT_TOKEN or not CHAT_ID:
        logger.error("BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        return False
    
    try:
        success = await course_handler.send_welcome_message(CHAT_ID)
        if success:
            logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
        return success
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
