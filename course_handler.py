"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ–±—É—á–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
"""

import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, List, Optional

from dotenv import load_dotenv
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError

from permissions import is_admin_identity
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

try:
    from config import TELEGRAM_GROUP_USERNAME  # type: ignore
except Exception:
    raw_group_username = os.getenv('TELEGRAM_GROUP_USERNAME', '@learncoding_team') or '@learncoding_team'
    raw_group_username = raw_group_username.strip() or '@learncoding_team'
    if not raw_group_username.startswith('@'):
        raw_group_username = f'@{raw_group_username}'
    TELEGRAM_GROUP_USERNAME = raw_group_username

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
STATE_FILE = os.getenv('STATE_FILE', 'state.json')

# –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–æ–≤ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ scheduler_course)
from scheduler_course import HTML_CSS_LESSONS, JAVASCRIPT_LESSONS
from user_progress import progress_manager

class CourseHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∫—É—Ä—Å–∞"""
    
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN) if BOT_TOKEN else None
        self.current_index = self.load_index()
        
    def load_index(self) -> int:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞"""
        try:
            if os.path.exists(STATE_FILE):
                with open(STATE_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('lesson_index', 0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ —É—Ä–æ–∫–∞: {e}")
        return 0
    
    def save_index(self, index: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞"""
        try:
            data = {'lesson_index': index, 'last_updated': datetime.now().isoformat()}
            with open(STATE_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —É—Ä–æ–∫–∞: {e}")
    
    def make_lesson(self, idx: int) -> Dict[str, str]:
        """–°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Ä–æ–∫–∞ (HTML/CSS –∏–ª–∏ JavaScript)
        lesson_type = "HTML/CSS" if (idx // len(HTML_CSS_LESSONS)) % 2 == 0 else "JavaScript"
        
        if lesson_type == "HTML/CSS":
            lesson_data = HTML_CSS_LESSONS[idx % len(HTML_CSS_LESSONS)]
            lesson_num = (idx % len(HTML_CSS_LESSONS)) + 1
        else:
            lesson_data = JAVASCRIPT_LESSONS[idx % len(JAVASCRIPT_LESSONS)]
            lesson_num = (idx % len(JAVASCRIPT_LESSONS)) + 1
        
        return {
            'title': f"–£—Ä–æ–∫ {idx + 1}. {lesson_data['title']}",
            'theory': lesson_data['theory'],
            'homework': lesson_data['homework'],
            'type': lesson_type
        }
    
    async def send_lesson(self, chat_id: str, lesson_index: int, user_id: int = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.bot:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN")
            return False
        
        try:
            lesson = self.make_lesson(lesson_index)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                f"üìö <b>{lesson['title']}</b>\n\n"
                f"üí° <b>–¢–µ–æ—Ä–∏—è:</b>\n{lesson['theory']}\n\n"
                f"üìù <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n{lesson['homework']}\n\n"
                f"‚úÖ <b>–°–¥–∞—ë–º –î–ó:</b> –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ\n\n"
                f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {lesson['type']}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y')}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                    url="https://t.me/vadzim_belarus"
                )],
                [InlineKeyboardButton(
                    "üìö –í—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞",
                    url="https://t.me/learncoding_team"
                )],
                [InlineKeyboardButton(
                    "üåê –°–∞–π—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                    url="https://vadzim.by"
                )],
                [InlineKeyboardButton(
                    "üìñ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫",
                    callback_data=f"next_lesson_{lesson_index + 1}"
                )]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await self.bot.pin_chat_message(chat_id=chat_id, message_id=message.message_id)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            except TelegramError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
            self.save_index(lesson_index + 1)
            
            logger.info(f"–£—Ä–æ–∫ {lesson_index + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞: {e}")
            return False
    
    async def send_welcome_message(self, chat_id: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π"""
        if not self.bot:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN")
            return False
        
        try:
            welcome_text = (
                "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!</b>\n\n"
                "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "<b>üìö –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>\n"
                "‚Ä¢ HTML/CSS –æ—Å–Ω–æ–≤—ã\n"
                "‚Ä¢ JavaScript –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
                "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
                "<b>üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\"\n"
                "2. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫\n"
                "3. –ò–∑—É—á–∞–π—Ç–µ –≤ —Å–≤–æ–µ–º —Ç–µ–º–ø–µ!\n\n"
                "<b>üí° –ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/progress - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                "/next - —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫\n"
                "/reset - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n\n"
                "<b>üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
                "‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–∫–∏ –ø–æ —Å–≤–æ–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É\n"
                "‚Ä¢ –°–æ—Ç–Ω–∏ –ª—é–¥–µ–π –º–æ–≥—É—Ç —É—á–∏—Ç—å—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ\n"
                "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n\n"
                "<b>üë®‚Äçüíª –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω—Ç–æ—Ä–æ–º –í–∞–¥–∏–º–æ–º - –æ–Ω –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–∂–µ—Ç!\n\n"
                "<b>–ù–∞—á–Ω–µ–º –æ–±—É—á–µ–Ω–∏–µ?</b>"
            )
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "üéì –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                    callback_data="start_course"
                )],
                [InlineKeyboardButton(
                    "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º",
                    url="https://t.me/vadzim_belarus"
                )],
                [InlineKeyboardButton(
                    "üåê –°–∞–π—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                    url="https://vadzim.by"
                )]
            ])
            
            message = await self.bot.send_message(
                chat_id=chat_id,
                text=welcome_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await self.bot.pin_chat_message(chat_id=chat_id, message_id=message.message_id)
                logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            except TelegramError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
course_handler = CourseHandler()

async def course_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /course"""
    try:
        chat_id = str(update.effective_chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
        if chat_id != CHAT_ID:
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ {TELEGRAM_GROUP_USERNAME}"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = await course_handler.send_welcome_message(chat_id)
        
        if success:
            await update.message.reply_text(
                "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.first_name}")
        
        await query.answer()
        
        chat_id = str(update.effective_chat.id)
        logger.info(f"Chat ID: {chat_id}, –æ–∂–∏–¥–∞–µ–º—ã–π: {CHAT_ID}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
        if chat_id != CHAT_ID:
            logger.warning(f"Callback –∏–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã: {chat_id}")
            await query.edit_message_text(
                f"–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ {TELEGRAM_GROUP_USERNAME}"
            )
            return
        
        if query.data == "start_course":
            logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º start_course")
            try:
                user_id = query.from_user.id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                if progress_manager.is_rate_limited(user_id, "lesson"):
                    await query.edit_message_text(
                        "‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É.\n"
                        "–≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö 567 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                    )
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                next_lesson = progress_manager.get_next_lesson(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                success = await course_handler.send_lesson(chat_id, next_lesson, user_id)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    progress_manager.update_user_progress(user_id, next_lesson)
                    
                    await query.edit_message_text(
                        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£—Ä–æ–∫ {next_lesson + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                        f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: —É—Ä–æ–∫ {next_lesson + 1} –∏–∑ {len(HTML_CSS_LESSONS) + len(JAVASCRIPT_LESSONS)}\n\n"
                        f"üí° <b>–°–æ–≤–µ—Ç:</b> –ò–∑—É—á–∏—Ç–µ —É—Ä–æ–∫ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É!"
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ start_course: {e}")
                await query.edit_message_text(
                    f"–û—à–∏–±–∫–∞: {str(e)[:100]}..."
                )
        
        elif query.data.startswith("next_lesson_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {query.data}")
            try:
                user_id = query.from_user.id
                lesson_index = int(query.data.split("_")[2])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                success = await course_handler.send_lesson(chat_id, lesson_index, user_id)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    progress_manager.update_user_progress(user_id, lesson_index)
                    
                    await query.edit_message_text(
                        f"‚úÖ –£—Ä–æ–∫ {lesson_index + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                        f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: —É—Ä–æ–∫ {lesson_index + 1} –∏–∑ {len(HTML_CSS_LESSONS) + len(JAVASCRIPT_LESSONS)}"
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ next_lesson: {e}")
                await query.edit_message_text(
                    f"–û—à–∏–±–∫–∞: {str(e)[:100]}..."
                )
        elif query.data.startswith("check_theory_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {query.data}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–æ—Ä–∏–∏
            lesson_index = int(query.data.split("_")[2])
            lesson = course_handler.make_lesson(lesson_index)
            
            theory_questions = f"""<b>ü§î –ü–†–û–í–ï–†–ö–ê –¢–ï–û–†–ò–ò</b>

<b>–í–æ–ø—Ä–æ—Å—ã –ø–æ —É—Ä–æ–∫—É {lesson_index + 1}:</b>

1. –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç HTML?
2. –ö–∞–∫–∏–µ —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º HTML-–¥–æ–∫—É–º–µ–Ω—Ç–µ?
3. –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–∞—Ä–Ω—ã–º–∏ –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏?
4. –ó–∞—á–µ–º –Ω—É–∂–µ–Ω –∞—Ç—Ä–∏–±—É—Ç alt —É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π?

<b>üìù –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b>
–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. [–≤–∞—à –æ—Ç–≤–µ—Ç]
2. [–≤–∞—à –æ—Ç–≤–µ—Ç]
3. [–≤–∞—à –æ—Ç–≤–µ—Ç]
4. [–≤–∞—à –æ—Ç–≤–µ—Ç]

<b>‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞:</b>
–í–∞–¥–∏–º –∏ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –¥–∞–¥—É—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!"""
            
            await query.edit_message_text(
                theory_questions,
                parse_mode='HTML'
            )
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        user_id = update.effective_user.id
        stats = progress_manager.get_user_stats(user_id)
        
        progress_text = f"""üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫—É—Ä—Å–µ:</b>

üéØ <b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫:</b> {stats['current_lesson'] + 1}
‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤:</b> {stats['completed_count']}
üìÖ <b>–ù–∞—á–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ:</b> {stats['started_at'][:10]}
üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {stats['last_activity'][:16]}

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/progress - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
/next - –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫"""
        
        await update.message.reply_text(progress_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /progress: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        user_id = update.effective_user.id
        progress_manager.reset_user_progress(user_id)
        
        await update.message.reply_text(
            "üîÑ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /reset: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_button_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ '–£—á–∏—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ' (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–í–∞–¥–∏–º)
        if not is_admin_identity(user_id, getattr(update.effective_user, "username", None)):
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
            )
            return
        
        chat_id = str(update.effective_chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
        if chat_id != CHAT_ID:
            await update.message.reply_text(
                f"üëã –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ {TELEGRAM_GROUP_USERNAME}"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        success = await course_handler.send_welcome_message(chat_id)
        
        if success:
            await update.message.reply_text(
                "‚úÖ –ö–Ω–æ–ø–∫–∞ '–£—á–∏—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /sendbutton: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–í–∞–¥–∏–º)
        if not is_admin_identity(user_id, getattr(update.effective_user, "username", None)):
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã
        group_stats = progress_manager.get_group_stats()
        
        stats_text = f"""üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–£–ü–ü–´</b>

üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {group_stats['total_users']}
üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {group_stats['active_users']}
üìö <b>–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–æ:</b> {group_stats['total_lessons_requested']}
üìà <b>–°—Ä–µ–¥–Ω–µ–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {group_stats['average_lessons_per_user']:.1f}

<b>üí° –ê–Ω–∞–ª–∏–∑:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {group_stats['active_users']/group_stats['total_users']*100:.1f}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω—ã
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {group_stats['average_lessons_per_user']:.1f} —É—Ä–æ–∫–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –¥–ª—è {group_stats['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def next_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞"""
    try:
        user_id = update.effective_user.id
        chat_id = str(update.effective_chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
        if chat_id != CHAT_ID:
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ {TELEGRAM_GROUP_USERNAME}"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        if progress_manager.is_rate_limited(user_id, "lesson"):
            await update.message.reply_text(
                "‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É.\n"
                "–≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö 567 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        next_lesson = progress_manager.get_next_lesson(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = await course_handler.send_lesson(chat_id, next_lesson, user_id)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            progress_manager.update_user_progress(user_id, next_lesson)
            
            await update.message.reply_text(
                f"‚úÖ –£—Ä–æ–∫ {next_lesson + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: —É—Ä–æ–∫ {next_lesson + 1} –∏–∑ {len(HTML_CSS_LESSONS) + len(JAVASCRIPT_LESSONS)}\n\n"
                f"üí° <b>–°–æ–≤–µ—Ç:</b> –ò–∑—É—á–∏—Ç–µ —É—Ä–æ–∫ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É!"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /next: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def setup_course_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∫—É—Ä—Å–∞"""
    application.add_handler(CommandHandler("course", course_start_command))
    application.add_handler(CommandHandler("progress", progress_command))
    application.add_handler(CommandHandler("reset", reset_command))
    application.add_handler(CommandHandler("next", next_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("sendbutton", send_button_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∫—É—Ä—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

async def send_welcome_to_group():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    if not BOT_TOKEN or not CHAT_ID:
        logger.error("BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        return False
    
    try:
        success = await course_handler.send_welcome_message(CHAT_ID)
        if success:
            logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
        return success
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
