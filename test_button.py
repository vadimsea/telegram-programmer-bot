"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
"""

import asyncio
import os
from dotenv import load_dotenv
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

async def test_welcome_message():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ùå BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print(f"BOT_TOKEN: {BOT_TOKEN[:20] if BOT_TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù'}...")
        print(f"CHAT_ID: {CHAT_ID}")
        return False
    
    try:
        bot = Bot(token=BOT_TOKEN)
        
        welcome_text = (
            "üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!</b>\n\n"
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ HTML, CSS –∏ JavaScript.\n\n"
            "üìö <b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>\n"
            "‚Ä¢ 11 –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ —Å —Ç–µ–æ—Ä–∏–µ–π –∏ –ø—Ä–∞–∫—Ç–∏–∫–æ–π\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
            "‚Ä¢ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–Ω—Ç–æ—Ä–∞\n\n"
            "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫."
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üéì –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                callback_data="start_course"
            )],
            [InlineKeyboardButton(
                "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º",
                url="https://t.me/vadzim_belarus"
            )],
            [InlineKeyboardButton(
                "üåê –°–∞–π—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                url="https://vadzim.by"
            )]
        ])
        
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É...")
        message = await bot.send_message(
            chat_id=CHAT_ID,
            text=welcome_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        print("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        print(f"Message ID: {message.message_id}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.pin_chat_message(chat_id=CHAT_ID, message_id=message.message_id)
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def test_first_lesson():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞"""
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ùå BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        return False
    
    try:
        bot = Bot(token=BOT_TOKEN)
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
        lesson_text = (
            "üìö <b>–£—Ä–æ–∫ 1. –û—Å–Ω–æ–≤—ã HTML</b>\n\n"
            "üí° <b>–¢–µ–æ—Ä–∏—è:</b>\n"
            "HTML (HyperText Markup Language) ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
            "üîπ –û–°–ù–û–í–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:\n"
            "–ö–∞–∂–¥—ã–π HTML-–¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <!DOCTYPE html> –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
            "- <html> ‚Äî –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç\n"
            "- <head> ‚Äî –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\n"
            "- <body> ‚Äî –≤–∏–¥–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
            "üìù <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∞–±–∑–∞—Ü–µ–º.\n\n"
            "‚úÖ <b>–°–¥–∞—ë–º –î–ó:</b> –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ\n\n"
            "üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> HTML/CSS\n"
            "üìÖ <b>–î–∞—Ç–∞:</b> 15.01.2025"
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                url="https://t.me/vadzim_belarus"
            )],
            [InlineKeyboardButton(
                "üìö –í—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞",
                url="https://t.me/learncoding_team"
            )],
            [InlineKeyboardButton(
                "üåê –°–∞–π—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                url="https://vadzim.by"
            )],
            [InlineKeyboardButton(
                "üìñ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫",
                callback_data="next_lesson_1"
            )]
        ])
        
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤ –≥—Ä—É–ø–ø—É...")
        message = await bot.send_message(
            chat_id=CHAT_ID,
            text=lesson_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        print("‚úÖ –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        print(f"Message ID: {message.message_id}")
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞: {e}")
        return False

async def main():
    print("=" * 60)
    print("–¢–ï–°–¢ –ö–ù–û–ü–ö–ò '–ù–ê–ß–ê–¢–¨ –û–ë–£–ß–ï–ù–ò–ï –ë–ï–°–ü–õ–ê–¢–ù–û'")
    print("=" * 60)
    
    print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    welcome_ok = await test_welcome_message()
    
    if welcome_ok:
        print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫...")
        lesson_ok = await test_first_lesson()
        
        if lesson_ok:
            print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—É @learncoding_team")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É—Ä–æ–∫–∞")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main())
