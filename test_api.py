#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_api.py
"""

import asyncio
import aiohttp
import json
from config import (
    GROQ_API_URL, GROQ_API_KEY,
    HUGGING_FACE_API_URL, HUGGING_FACE_TOKEN,
    SYSTEM_PROMPT
)

async def test_groq_api():
    """–¢–µ—Å—Ç Groq API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Groq API...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {GROQ_API_KEY}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "gemma2-9b-it",
                "messages": [
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
                ],
                "max_tokens": 100,
                "temperature": 0.7
            }
            
            async with session.post(GROQ_API_URL, headers=headers, json=payload, timeout=30) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ Groq API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    print(f"üìù –û—Ç–≤–µ—Ç: {data['choices'][0]['message']['content'][:100]}...")
                    return True
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_huggingface_api():
    """–¢–µ—Å—Ç HuggingFace API"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é HuggingFace API...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {HUGGING_FACE_TOKEN}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "inputs": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "parameters": {
                    "max_length": 100,
                    "temperature": 0.7,
                    "do_sample": True
                }
            }
            
            async with session.post(HUGGING_FACE_API_URL, headers=headers, json=payload, timeout=30) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ HuggingFace API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    if isinstance(data, list) and len(data) > 0:
                        response_text = data[0].get("generated_text", "")
                        print(f"üìù –û—Ç–≤–µ—Ç: {response_text[:100]}...")
                    return True
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è Telegram –±–æ—Ç–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç Groq
    groq_ok = await test_groq_api()
    
    # –¢–µ—Å—Ç HuggingFace
    hf_ok = await test_huggingface_api()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"Groq API: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if groq_ok else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"HuggingFace API: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if hf_ok else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    if groq_ok and hf_ok:
        print("\nüéâ –í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    elif groq_ok:
        print("\n‚ö†Ô∏è –¢–æ–ª—å–∫–æ Groq —Ä–∞–±–æ—Ç–∞–µ—Ç. HuggingFace –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
    elif hf_ok:
        print("\n‚ö†Ô∏è –¢–æ–ª—å–∫–æ HuggingFace —Ä–∞–±–æ—Ç–∞–µ—Ç. Groq –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
    else:
        print("\nüö® –ù–∏ –æ–¥–∏–Ω API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–ª—é—á–∏.")
    
    print("\nüí° –°–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∞–π–ª API_KEYS_SETUP.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é.")

if __name__ == "__main__":
    asyncio.run(main())
