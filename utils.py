"""
–£–ª—É—á—à–µ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–æ—Ç–∞
"""

import re
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple

logger = logging.getLogger(__name__)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
PROGRAMMING_LANGUAGES = {
    'python': ['python', 'py', '–ø–∏—Ç–æ–Ω', '–ø–∞–π—Ç–æ–Ω'],
    'javascript': ['javascript', 'js', '–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç', 'node'],
    'typescript': ['typescript', 'ts', '—Ç–∞–π–ø—Å–∫—Ä–∏–ø—Ç'],
    'java': ['java', '–¥–∂–∞–≤–∞'],
    'cpp': ['c++', 'cpp', 'c plus plus', '—Å–∏ –ø–ª—é—Å –ø–ª—é—Å'],
    'c': ['c', '—Å–∏'],
    'rust': ['rust', '—Ä–∞—Å—Ç'],
    'go': ['go', 'golang', '–≥–æ—É'],
    'php': ['php', '–ø—Ö–ø'],
    'ruby': ['ruby', '—Ä—É–±–∏'],
    'swift': ['swift', '—Å–≤–∏—Ñ—Ç'],
    'kotlin': ['kotlin', '–∫–æ—Ç–ª–∏–Ω'],
    'sql': ['sql', 'mysql', 'postgresql', 'sqlite'],
    'html': ['html', '—Ö—Ç–º–ª'],
    'css': ['css', '—Å—Ç–∏–ª–∏'],
    'bash': ['bash', 'shell', 'terminal', '—Ç–µ—Ä–º–∏–Ω–∞–ª']
}


def extract_programming_language(text: str) -> Optional[str]:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text_lower = text.lower()

    for lang, keywords in PROGRAMMING_LANGUAGES.items():
        if any(keyword in text_lower for keyword in keywords):
            return lang

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É –∫–æ–¥–∞
    if 'def ' in text and ':' in text:
        return 'python'
    elif 'function' in text and '{' in text:
        return 'javascript'
    elif 'public class' in text:
        return 'java'
    elif '#include' in text:
        return 'cpp'

    return None


def is_code_question(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    programming_indicators = [
        '–∫–æ–¥', '—Ñ—É–Ω–∫—Ü–∏—è', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–º–∞—Å—Å–∏–≤', '–æ–±—ä–µ–∫—Ç', '–∫–ª–∞—Å—Å',
        '–∞–ª–≥–æ—Ä–∏—Ç–º', '–æ—à–∏–±–∫–∞', '–±–∞–≥', '–æ—Ç–ª–∞–¥–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∞',
        'code', 'function', 'variable', 'array', 'object', 'class',
        'algorithm', 'error', 'bug', 'debug', 'program',
        '```', 'import', 'from', 'def ', 'function', 'var ', 'let ',
        'const ', 'class ', 'interface', 'type', 'struct'
    ]

    text_lower = text.lower()
    return any(indicator in text_lower for indicator in programming_indicators)


def format_code_response(response: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–¥–æ–º"""
    if not response:
        return response

    # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    response = re.sub(r'```(\w+)?\n(.*?)\n```', r'```\1\n\2\n```', response, flags=re.DOTALL)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è inline –∫–æ–¥–∞
    response = re.sub(r'`([^`]+)`', r'`\1`', response)

    # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
    response = re.sub(r'\n(\d+)\. ', r'\n\1\. ', response)
    response = re.sub(r'\n- ', r'\n&#8226; ', response)

    return response


def clean_response(response: str) -> str:
    """–û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not response:
        return "ü§ñ –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò"

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    response = re.sub(r'\n{3,}', '\n\n', response)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    response = response.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    if len(response) < 10:
        return "ü§ñ –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"

    return response


def split_long_message(text: str, max_length: int = 4000) -> List[str]:
    """–†–∞–∑–¥–µ–ª–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ —Å —É–º–Ω—ã–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º"""
    if len(text) <= max_length:
        return [text]

    parts = []
    current_part = ""

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = text.split('\n\n')

    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        if len(paragraph) > max_length:
            sentences = paragraph.split('. ')
            for sentence in sentences:
                if len(current_part + sentence) > max_length:
                    if current_part:
                        parts.append(current_part.strip())
                        current_part = sentence + '. '
                    else:
                        # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                        parts.append(sentence[:max_length] + "...")
                else:
                    current_part += sentence + '. '
        else:
            if len(current_part + paragraph) > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = paragraph + '\n\n'
                else:
                    parts.append(paragraph)
            else:
                current_part += paragraph + '\n\n'

    if current_part:
        parts.append(current_part.strip())

    return parts


def analyze_code_complexity(code: str) -> Dict[str, any]:
    """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
    lines = code.split('\n')
    non_empty_lines = [line for line in lines if line.strip()]

    # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    metrics = {
        'total_lines': len(lines),
        'code_lines': len(non_empty_lines),
        'functions': len(re.findall(r'def\s+\w+|function\s+\w+', code)),
        'classes': len(re.findall(r'class\s+\w+', code)),
        'comments': len(re.findall(r'#.*|//.*|/\*.*?\*/', code)),
        'complexity_score': 0
    }

    # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complexity_indicators = ['if', 'for', 'while', 'try', 'catch', 'switch']
    for indicator in complexity_indicators:
        metrics['complexity_score'] += len(re.findall(rf'\b{indicator}\b', code.lower()))

    return metrics


def generate_code_suggestions(code: str, language: str) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–¥–∞"""
    suggestions = []

    # –û–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if len(code.split('\n')) > 50:
        suggestions.append("üìè –§—É–Ω–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏")

    if language == 'python':
        if 'import *' in code:
            suggestions.append("‚ö†Ô∏è –ò–∑–±–µ–≥–∞–π import * - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        if not re.search(r'""".*?"""', code) and 'def ' in code:
            suggestions.append("üìù –î–æ–±–∞–≤—å docstring –∫ —Ñ—É–Ω–∫—Ü–∏—è–º")

    elif language == 'javascript':
        if 'var ' in code:
            suggestions.append("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π let/const –≤–º–µ—Å—Ç–æ var")
        if '==' in code and '===' not in code:
            suggestions.append("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π === –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

    return suggestions


def log_user_interaction(user_id: int, username: str, message: str, response_length: int):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
    interaction_data = {
        'timestamp': datetime.now().isoformat(),
        'user_id': user_id,
        'username': username,
        'message_length': len(message),
        'response_length': response_length,
        'language': extract_programming_language(message),
        'is_code_related': is_code_question(message)
    }

    logger.info(f"User interaction: {json.dumps(interaction_data)}")


def create_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    filled = int(length * current / total)
    bar = '‚ñà' * filled + '‚ñë' * (length - filled)
    percentage = int(100 * current / total)
    return f"[{bar}] {percentage}%"


def format_file_info(filename: str, size: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
    size_kb = size / 1024
    if size_kb < 1:
        size_str = f"{size} –±–∞–π—Ç"
    elif size_kb < 1024:
        size_str = f"{size_kb:.1f} –ö–ë"
    else:
        size_str = f"{size_kb / 1024:.1f} –ú–ë"

    return f"üìÑ **{filename}** ({size_str})"


def detect_code_issues(code: str, language: str) -> List[Dict[str, str]]:
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ"""
    issues = []

    # –û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if len(code.split('\n')) > 100:
        issues.append({
            'type': 'warning',
            'message': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª–∏'
        })

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —è–∑—ã–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
    if language == 'python':
        if re.search(r'except:', code):
            issues.append({
                'type': 'error',
                'message': '–ò–∑–±–µ–≥–∞–π –≥–æ–ª—ã—Ö except - —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è'
            })

    elif language == 'javascript':
        if 'eval(' in code:
            issues.append({
                'type': 'security',
                'message': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval() –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ'
            })

    return issues
