"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import requests
import json
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8332694363:AAF8W5IofpsVvjWSz1yWBciBBVP_rFrQrFY"
CHAT_ID = "-1002949858700"

def get_updates():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞"""
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    
    try:
        response = requests.get(url, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("ok"):
                return result["result"]
            else:
                print(f"–û—à–∏–±–∫–∞ API: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return []
        else:
            print(f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return []

def answer_callback_query(callback_id, text):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query"""
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
    
    data = {
        "callback_query_id": callback_id,
        "text": text
    }
    
    try:
        response = requests.post(url, data=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("ok"):
                print("–û—Ç–≤–µ—Ç –Ω–∞ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ API: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def send_test_lesson():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π"""
    
    lesson_text = (
        "üìö <b>–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫</b>\n\n"
        "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback."
    )
    
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏",
                    "callback_data": "test_button"
                }
            ]
        ]
    }
    
    data = {
        "chat_id": CHAT_ID,
        "text": lesson_text,
        "parse_mode": "HTML",
        "reply_markup": json.dumps(keyboard)
    }
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    try:
        response = requests.post(url, data=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("ok"):
                message_id = result["result"]["message_id"]
                print(f"–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID: {message_id}")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ API: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def monitor_callbacks():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ callback –¥–∞–Ω–Ω—ã—Ö"""
    
    print("=" * 60)
    print("–ú–û–ù–ò–¢–û–†–ò–ù–ì CALLBACK –î–ê–ù–ù–´–•")
    print("=" * 60)
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print()
    
    last_update_id = 0
    
    try:
        while True:
            updates = get_updates()
            
            for update in updates:
                update_id = update["update_id"]
                
                if update_id > last_update_id:
                    last_update_id = update_id
                    
                    if "callback_query" in update:
                        callback = update["callback_query"]
                        print(f"Callback –ø–æ–ª—É—á–µ–Ω: {callback['data']}")
                        print(f"–û—Ç: {callback['from']['first_name']}")
                        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ ID: {callback['message']['message_id']}")
                        print(f"Callback ID: {callback['id']}")
                        
                        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                        answer_callback_query(callback['id'], "–ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        print("-" * 40)
            
            time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            
    except KeyboardInterrupt:
        print("\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    print("1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫...")
    send_test_lesson()
    
    print("\n2. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    print("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É @learncoding_team –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏'")
    
    monitor_callbacks()
