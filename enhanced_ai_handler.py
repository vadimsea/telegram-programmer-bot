"""
Enhanced AI Handler - —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞ –¥–ª—è Telegram (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
"""

import asyncio
import logging
import random
import re
from typing import List, Optional, Set, Tuple
from groq import AsyncGroq
from config import GROQ_API_KEY, GROQ_MODEL, SYSTEM_PROMPT

try:
    from smart_features import smart_features  # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    from database import user_db  # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
except ImportError:
    smart_features = None
    user_db = None

logger = logging.getLogger(__name__)


class EnhancedAIHandler:
    SMALL_TALK_PRESETS = [
        {
            "triggers": ("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Å–ª–æ–º–∞–ª–æ—Å—å", "–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è", "–æ—à–∏–±–∫–∞", "–±–∞–≥", "–ø–∞–¥–∞–µ—Ç", "—É –º–µ–Ω—è –±–∞–≥"),
            "responses": [
                "üõ† –ü–æ–Ω–∏–º–∞—é, –∫–∞–∫ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ª–æ–º–∞–µ—Ç—Å—è. –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥–µ—Ç–∞–ª–∏ –∏ —Ä–∞–∑–Ω–µ—Å—ë–º —ç—Ç–æ—Ç –±–∞–≥ –≤–º–µ—Å—Ç–µ.",
                "üßØ –û—Ö, –ø–æ—Ö–æ–∂–µ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å–∏—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –≤–∏–¥–∏—à—å ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑—Ä—É–ª–∏—Ç—å.",
                "ü§ñ –¢–µ—Ö–¥–æ–ª–≥ –Ω–∞—Å—Ç–∏–≥! –ö–∏–Ω—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ, –∏ –º—ã —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –Ω–∞–π–¥—ë–º —Ä–µ—à–µ–Ω–∏–µ.",
            ],
        },
        {
            "triggers": ("–ø–æ–ª—É—á–∏–ª–æ—Å—å", "–≥–æ—Ç–æ–≤–æ", "—Å–¥–µ–ª–∞–ª", "—É—Å–ø–µ—Ö", "–∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ", "–∑–∞–≤–µ–ª–æ—Å—å"),
            "responses": [
                "üî• –ö—Ä–∞—Å–æ—Ç–∞! –õ—é–±–ª—é —Ç–∞–∫–∏–µ –∞–ø–¥–µ–π—Ç—ã. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –µ—â—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.",
                "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ú–æ–∂–µ–º —Å—Ä–∞–∑—É –ø–æ–¥—É–º–∞—Ç—å, –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.",
                "üôå –í–æ—Ç —ç—Ç–æ —Å–∫–æ—Ä–æ—Å—Ç—å! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –ø–æ–º–æ–≥—É –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—Ö, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.",
            ],
        },
        {
            "triggers": ("–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ –∂–∏–∑–Ω—å", "–∫–∞–∫ —Ç—ã", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"),
            "responses": [
                "üòä –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –° —É—Ç—Ä–∞ —Ä–∞–∑—Ä—É–ª–∏–≤–∞–ª –ø–∞—Ä—É –±–æ–π–ª–µ—Ä–ø–ª–µ–π—Ç–æ–≤, –∞ —Å–µ–π—á–∞—Å –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ. –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –ø–ª–∞–Ω–∞—Ö?",
                "üí™ –î–µ—Ä–∂—É—Å—å –±–æ–¥—Ä–æ: —Ä–µ–≤—å—é–ª—é –∫–æ–¥, –ø–æ–¥–ø–∏–ª–∏–≤–∞—é –±–æ—Ç–∞ –∏ —Å–ª–µ–∂—É, —á—Ç–æ–±—ã –¥–µ–ø–ª–æ–π –Ω–∞ Render –Ω–µ –∑–∞—Å–Ω—É–ª. –ö–∞–∫ —É —Ç–µ–±—è –ø—Ä–æ–≥—Ä–µ—Å—Å?",
                "‚òï –ü—å—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ—Ñ–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä—é –ª–æ–≥–∏, —á—Ç–æ–±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ 24/7. –ß—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ —É —Ç–µ–±—è?",
            ],
        },
        {
            "triggers": ("—á—Ç–æ –¥–µ–ª–∞–µ—à—å", "—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è", "—á–µ–º –∑–∞–Ω—è—Ç"),
            "responses": [
                "üß∞ –°–µ–π—á–∞—Å –ø–µ—Ä–µ–±–∏—Ä–∞—é –ª–æ–≥–∏ –∏ –¥–æ–ø–∏–ª–∏–≤–∞—é –æ—Ç–≤–µ—Ç—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –∑–≤—É—á–∞–ª–∏ –∂–∏–≤–µ–µ. –•–æ—á–µ—à—å ‚Äî –ø–æ–¥–∫–ª—é—á—É –º–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º –∫ —Ç–≤–æ–µ–º—É –≤–æ–ø—Ä–æ—Å—É.",
                "üîç –ß–∏—â—É —Ç–µ—Ö–¥–æ–ª–≥, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è –∏ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—Ö–æ–¥–∏–ª —Ä–µ—à–µ–Ω–∏—è. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞–±–æ–ª–µ–ª–æ?",
                "üõ† –ö—Ä—É—á—É—Å—å –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏: —Ç–µ—Å—Ç–∏—Ä—É—é –∏–¥–µ–∏, –ø–∏—à—É —Å–Ω–∏–ø–ø–µ—Ç—ã, –ø–æ–º–æ–≥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –∏ —Å —Ç–≤–æ–µ–π –∑–∞–¥–∞—á–µ–π!",
            ],
        },
        {
            "triggers": ("—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
            "responses": [
                "üì∞ –ß–∏—Ç–∞—é —Å–≤–µ–∂–∏–µ –∞–ø–¥–µ–π—Ç—ã –ø–æ FastAPI –∏ Groq ‚Äî –ª—é–±–æ–ø—ã—Ç–Ω–æ, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏–¥—É–º–∞–ª–∏. –ê —É —Ç–µ–±—è –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏?",
                "üì¨ –†–∞–∑–±–∏—Ä–∞—é —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥—É–º–∞—é, –∫–∞–∫ –ø—Ä–æ–∫–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã. –î–µ–ª–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.",
                "üß≠ –ü—Ä–æ–±—É—é –Ω–æ–≤—ã–µ —Ç—Ä—é–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–µ, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª —Ç–æ—á–Ω–µ–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ ‚Äî –æ–±—Å—É–¥–∏–º!",
            ],
        },
        {
            "triggers": ("–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",),
            "responses": [
                "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∏—Ç—å –∑–ª–æ—Å—á–∞—Å—Ç–Ω—ã–π –±–∞–≥ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ—Å–Ω—ë—Ç—Å—è –≤—Å—è –∫–æ–º–∞–Ω–¥–∞.",
                "‚òÄÔ∏è –ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–±–µ–¥—ã ‚Äî —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?",
                "üß† –£—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–∑–≥ –∑–∞—Ä—è–∂–µ–Ω. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–≥—Ä–µ—Å—Ç–∏ –ª—é–±—É—é –∑–∞–¥–∞—á—É.",
            ],
        },
        {
            "triggers": ("–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",),
            "responses": [
                "üåû –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å —Ñ–∏—á—É –∏–ª–∏ –ø–æ—á–∏–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã ‚Äî —è —Ä—è–¥–æ–º.",
                "ü•™ –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ–Ω—å? –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∞–µ—à—å –Ω–∞ –∑–∞–¥–∞—á–µ, –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –µ—ë –≤–º–µ—Å—Ç–µ.",
                "üß≠ –ü–æ–ª–¥–µ–Ω—å ‚Äî –≤—Ä–µ–º—è –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –∫–æ–¥–µ. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?",
            ],
        },
        {
            "triggers": ("–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",),
            "responses": [
                "üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –û—Ç–ª–∏—á–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–≤—Ç—Ä–∞.",
                "üéß –Ø —Ç—É—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –∑–∞–¥–∞—á–∞–º –ø–µ—Ä–µ–¥ –æ—Ñ—Ñ–ª–∞–π–Ω–æ–º.",
                "üõã –í–µ—á–µ—Ä ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Å—É–¥–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏–ª–∏ –Ω–∞–±—Ä–æ—Å–∞—Ç—å –∏–¥–µ–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.",
            ],
        },
        {
            "triggers": ("–¥–æ–±—Ä–æ–π –Ω–æ—á–∏", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏"),
            "responses": [
                "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ —É—Ç—Ä–æ.",
                "üõå –û—Ç–¥—ã—Ö–∞–π! –£—Ç—Ä–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏–º —à—Ç—É—Ä–º–æ–≤–∞—Ç—å –∫–æ–¥ ‚Äî –∏–¥–µ–∏ —É–∂–µ –ø–æ–¥–∫–∏–ø–∞—é—Ç.",
                "üò¥ –ü–æ–Ω–∏–º–∞—é, —Å–º–µ–Ω–∞ –±—ã–ª–∞ –∂–∞—Ä–∫–∞—è. –Ø –ø–æ–±—É–¥—É –Ω–∞ —Å—Ç—Ä–∞–∂–µ, –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω—ë—à—å—Å—è.",
            ],
        },
        {
            "triggers": ("–ø—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç–∏–∫", "–∑–¥–æ—Ä–æ–≤–æ", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "hello", "hi", "hey"),
            "responses": [
                "üëã –ü—Ä–∏–≤–µ—Ç! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –∫–æ–¥–µ –∏ –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ß—Ç–æ —Å–µ–π—á–∞—Å –≤ —Ä–∞–±–æ—Ç–µ?",
                "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–∂–µ —Ä–∞–∑–æ–≥—Ä–µ–ª –º–æ–¥–µ–ª—å ‚Äî –¥–∞–≤–∞–π –∫ –¥–µ–ª—É?",
                "üôå –ü—Ä–∏–≤–µ—Ç! –°–ª—É—à–∞—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –†–∞—Å—Å–∫–∞–∂–∏, —Å —á–µ–º –ø–æ–º–æ—á—å.",
            ],
        },
        {
            "triggers": ("—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é"),
            "responses": [
                "‚ú® –í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –ø–æ–º–æ–≥—É.",
                "üòä –†–∞–¥, —á—Ç–æ –ø—Ä–∏–≥–æ–¥–∏–ª–æ—Å—å. –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.",
                "ü§ó –û–±—Ä–∞—â–∞–π—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! –õ—é–±–ª—é –≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–æ–≤.",
            ],
        },
        {
            "triggers": ("—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "—Ç—ã –∫—Ç–æ"),
            "responses": [
                "–Ø –ü–æ–º–æ—â–Ω–∏–∫ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ ‚Äî –º–µ–Ω—è —Å–æ–∑–¥–∞–ª –í–∞–¥–∏–º (vadzim.by). –õ—é–±–ª—é Python, –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –≤ IT.",
                "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ–º–æ—â–Ω–∏–∫ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞. –Ø ‚Äî –ø—Ä–æ–µ–∫—Ç –í–∞–¥–∏–º–∞ (vadzim.by) –∏ –æ–±–æ–∂–∞—é –ø–æ–º–æ–≥–∞—Ç—å —Å –∫–æ–¥–æ–º.",
                "–Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ –í–∞–¥–∏–º–∞ (vadzim.by). –ü–æ–¥—Å–∫–∞–∑–∫–∏, —Ä–µ–≤—å—é, –∏–¥–µ–∏ ‚Äî —ç—Ç–æ –∫–æ –º–Ω–µ.",
            ],
        },
        {
            "triggers": ("—Ç—ã —Ç—É—Ç", "—Ç—ã –∑–¥–µ—Å—å", "–Ω–∞ —Å–≤—è–∑–∏", "—Ç—ã –æ–Ω–ª–∞–π–Ω"),
            "responses": [
                "–í—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å! –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
                "–ù–∞ —Å–≤—è–∑–∏! –ü–æ–¥–∫–∏–¥—ã–≤–∞–π –∫–æ–¥ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –≤–º–µ—Å—Ç–µ —Ä–µ—à–∏–º.",
                "–î–∞, —è —Ä—è–¥–æ–º. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.",
            ],
        },
        {
            "triggers": ("–ø–æ–º–Ω–∏—à—å –º–µ–Ω—è",),
            "responses": [
                "–ö–æ–Ω–µ—á–Ω–æ! –Ø –≤–µ–¥—É –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, –Ω–∞ —á—ë–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.",
                "–ü–æ–º–Ω—é! –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –º—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞–ª–∏.",
                "–î–∞, –¥–µ—Ä–∂—É –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ß—Ç–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å —Å —Ç–µ—Ö –ø–æ—Ä?",
            ],
        },
        {
            "triggers": ("—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å", "–∫–∞–∫–æ–π —Å–æ–≤–µ—Ç"),
            "responses": [
                "–ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ö–æ–¥, —Ä–µ—Å—É—Ä—Å –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –£—Ç–æ—á–Ω–∏ —Ç–µ–º—É ‚Äî –∏ —è –ø–æ–¥–±–µ—Ä—É —á—Ç–æ-—Ç–æ –¥–µ–ª—å–Ω–æ–µ.",
                "–î–∞–≤–∞–π —Å—É–∑–∏–º –∑–∞–ø—Ä–æ—Å: –∫–∞–∫—É—é –æ–±–ª–∞—Å—Ç—å —Ö–æ—á–µ—à—å –ø–æ–¥—Ç—è–Ω—É—Ç—å? –Ø –ø–æ–¥—Å–∫–∞–∂—É, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å.",
                "–õ—é–±–ª—é –¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Ö–æ–¥–∫–∞–º–∏! –ù–∞–ø—Ä–∞–≤—å, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å, –∏ –ø–æ–¥–±–µ—Ä—É —á–µ–∫-–ª–∏—Å—Ç.",
            ],
        },
        {
            "triggers": ("—Å–∫—É—á–∞–µ—à—å",),
            "responses": [
                "üòÑ –¢—É—Ç –Ω–µ –¥–æ —Å–∫—É–∫–∏: –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á–µ–π-—Ç–æ pet-–ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –∂–¥—ë—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏. –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
                "üòÇ –Ø –∑–∞–Ω—è—Ç —Ç–µ–º, —á—Ç–æ —á–∏—Ç–∞—é –ª–æ–≥–∏ –∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—é –Ω–æ–≤—ã–µ —Ñ–∏—á–∏. –õ—É—á—à–µ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —É —Ç–µ–±—è!",
                "ü§ì –°–∫—É—á–∞—Ç—å –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è ‚Äî –ø—Ä–æ–µ–∫—Ç—ã –∫–∏–ø—è—Ç. –¢–∞–∫ —á—Ç–æ –∑–∞–ª–µ—Ç–∞–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.",
            ],
        },
    ]

    POSITIVE_KEYWORDS = (
        "—É—Ä–∞",
        "–ø–æ–ª—É—á–∏–ª–æ—Å—å",
        "–≥–æ—Ç–æ–≤–æ",
        "—Å–¥–µ–ª–∞–ª",
        "—Å–¥–µ–ª–∞–ª–∞",
        "–∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ",
        "–∑–∞—Ä–∞–±–æ—Ç–∞–ª",
        "—É—Å–ø–µ—Ö",
        "—Å—Ä–∞–±–æ—Ç–∞–ª–æ",
        "–≤—ã—à–ª–æ",
        "fixed",
        "done",
        "solved",
        "ready",
        "–∑–∞–∫–æ–º–º–∏—Ç–∏–ª",
        "–∑–∞–¥–µ–ø–ª–æ–∏–ª",
    )

    NEGATIVE_KEYWORDS = (
        "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "—Å–ª–æ–º–∞–ª–æ—Å—å",
        "–Ω–µ –≤—ã—Ö–æ–¥–∏—Ç",
        "–æ—à–∏–±–∫–∞",
        "–æ—à–∏–±–∫—É",
        "–±–∞–≥",
        "–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è",
        "—É–ø–∞–ª–æ",
        "—É–ø–∞–ª",
        "–ø–∞–¥–∞–µ—Ç",
        "–Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è",
        "fail",
        "problem",
        "issue",
        "traceback",
        "stack trace",
        "–≤—ã–ª–µ—Ç–∞–µ—Ç",
        "–Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç",
        "–Ω–µ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è",
    )

    SUPPORTIVE_REACTIONS = {
        "positive": [
            "üéâ –†–∞–¥ —Å–ª—ã—à–∞—Ç—å, —á—Ç–æ –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å! –ú–æ–∂–Ω–æ –≤—ã—á–µ—Ä–∫–Ω—É—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
            "üöÄ –û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º, —á–µ–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å —É—Å–ø–µ—Ö ‚Äî —Ç–µ—Å—Ç–∞–º–∏ –∏–ª–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º?",
            "üôå –°—É–ø–µ—Ä! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –ø–æ–º–æ–≥—É –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –±–µ–∑ –±–æ–ª–∏.",
        ],
        "negative": [
            "ü§ù –î–µ—Ä–∂–∏—Å—å, —Ç–∞–∫–æ–µ –ª–æ–≤—è—Ç –¥–∞–∂–µ —Å–µ–Ω—å–æ—Ä—ã. –û–ø–∏—à–∏, —á—Ç–æ –≤–∏–¥–∏—à—å –≤ –ª–æ–≥–∞—Ö ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è.",
            "üßò –ü–æ–Ω–∏–º–∞—é –±–æ–ª—å. –°–∫–∏–Ω—å —Å—Ç–µ–∫ –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞, –∏ –≤–º–µ—Å—Ç–µ –Ω–∞–π–¥—ë–º —Å–ª–∞–±–æ–µ –º–µ—Å—Ç–æ.",
            "üõü –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: —è–∑—ã–∫, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫, —á—Ç–æ –≤ –æ—à–∏–±–∫–µ. –ü–æ–º–æ–≥—É –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫.",
        ],
    }

    PERSONAL_TIPS = {
        "python": [
            "–ó–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ `ruff` –∏–ª–∏ `flake8` ‚Äî –º–µ–ª–∫–∏–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–µ—Ö–∏ –ø—Ä–æ—è–≤—è—Ç—Å—è —Å—Ä–∞–∑—É.",
            "–ï—Å–ª–∏ –º–Ω–æ–≥–æ I/O, –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ `asyncio.to_thread` –∏–ª–∏ `anyio`, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª.",
            "–¢–∏–ø–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ `typing` + `pydantic` –ø–æ–º–æ–≥–∞–µ—Ç –ª–æ–≤–∏—Ç—å –±–∞–≥–∏ –µ—â—ë –¥–æ –∑–∞–ø—É—Å–∫–∞.",
        ],
        "javascript": [
            "–ù–∞—Å—Ç—Ä–æ–π `eslint` + `prettier` –≤ pre-commit ‚Äî –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –∫–æ–¥ –≤ –æ–¥–Ω–æ–º —Å—Ç–∏–ª–µ.",
            "–ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —Ä–∞—Å—Ç—ë—Ç, –ø–æ–¥—É–º–∞–π –æ TypeScript –∏–ª–∏ —Ö–æ—Ç—è –±—ã JSDoc –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π.",
            "–ò—Å–ø–æ–ª—å–∑—É–π `console.group` –∏ `console.table` ‚Äî —Ç–∞–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ–µ.",
        ],
        "debugging": [
            "–°–æ–±–µ—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä, –≥–¥–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞ ‚Äî –ø–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏.",
            "–í–∫–ª—é—á–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ (—É—Ä–æ–≤–µ–Ω—å DEBUG) –≤–æ–∫—Ä—É–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ ‚Äî —á–∞—Å—Ç–æ —ç—Ç–æ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç.",
            "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ `git bisect`: –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—ë—Ç –∫–æ–º–º–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω—ë—Å –±–∞–≥.",
        ],
        "learning": [
            "–í–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏: —á—Ç–æ –ø—Ä–æ–±–æ–≤–∞–ª, —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —á—Ç–æ –Ω–µ—Ç.",
            "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤–µ–¥–∏ pet-–ø—Ä–æ–µ–∫—Ç ‚Äî –ª—É—á—à–µ –≤—Å–µ–≥–æ —É—á–∏—Ç—å—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
            "–°—Ç–∞–≤—å –∏–∑–º–µ—Ä–∏–º—ã–µ —Ü–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –æ—Ç–º–µ—á–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏—è —Ä–∞—Å—Ç—ë—Ç.",
        ],
        "fastapi": [
            "–ò—Å–ø–æ–ª—å–∑—É–π `Depends` –∏ `BackgroundTasks` ‚Äî —Ç–∞–∫ –∫–æ–¥ —á–∏—â–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—â–µ.",
            "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —á–µ—Ä–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ FastAPI, —á—Ç–æ–±—ã OpenAPI –±—ã–ª –ø–æ–Ω—è—Ç–Ω–µ–µ.",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ `pydantic`-–º–æ–¥–µ–ª–∏ —Å–ø–∞—Å–∞–µ—Ç –æ—Ç –∫—Ä–∏–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –µ—â—ë –¥–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏.",
        ],
        "telegram": [
            "–í—ã–Ω–µ—Å–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ‚Äî —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–æ—â–µ –ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å –±–æ—Ç–∞.",
            "–ï—Å–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ç—É—Ç, –ø–æ–¥—É–º–∞–π –æ –≤–µ–±—Ö—É–∫–∞—Ö + –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (Redis, RabbitMQ).",
            "–ù–µ –∑–∞–±—ã–≤–∞–π —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî —ç—Ç–æ –±–∞–∑–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.",
        ],
    }

    TOPIC_LABELS = {
        "python": "Python",
        "javascript": "JavaScript",
        "debugging": "–æ—Ç–ª–∞–¥–∫–µ",
        "learning": "–æ–±—É—á–µ–Ω–∏—é",
        "fastapi": "FastAPI",
        "telegram": "Telegram-–±–æ—Ç–∞–º",
    }

    def __init__(self):
        self.groq_client = AsyncGroq(api_key=GROQ_API_KEY) if GROQ_API_KEY else None
        logger.info("ü§ñ EnhancedAIHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    def _match_small_talk(self, message_lower: str) -> Optional[str]:
        for preset in self.SMALL_TALK_PRESETS:
            if any(trigger in message_lower for trigger in preset["triggers"]):
                return random.choice(preset["responses"])
        return None

    def _detect_message_tone(self, message_lower: str) -> Optional[str]:
        if any(keyword in message_lower for keyword in self.NEGATIVE_KEYWORDS):
            return "negative"
        if any(keyword in message_lower for keyword in self.POSITIVE_KEYWORDS):
            return "positive"
        return None

    def _augment_with_tone(self, response: str, tone: str) -> str:
        reactions = self.SUPPORTIVE_REACTIONS.get(tone)
        if not reactions:
            return response
        addition = random.choice(reactions)
        if addition in response:
            return response
        return f"{response}\n\n{addition}"

    def _maybe_add_personal_tip(
        self,
        response: str,
        preferences: dict,
        user_context=None,
        message_lower: str = "",
    ) -> str:
        topics: List[str] = []

        if preferences:
            for value in preferences.get('favorite_languages', []):
                topic_key = self._map_topic_to_tip_key(value)
                if topic_key:
                    topics.append(topic_key)
            for value in preferences.get('learning_goals', []):
                topic_key = self._map_topic_to_tip_key(value)
                if topic_key:
                    topics.append(topic_key)

        message_lower = (message_lower or "").lower()
        if 'fastapi' in message_lower:
            topics.append('fastapi')
        if 'telegram' in message_lower or '–±–æ—Ç' in message_lower:
            topics.append('telegram')

        if user_context and hasattr(user_context, 'user_id') and getattr(user_context, 'user_id', None) and user_db:
            try:
                user_data = user_db.get_user(user_context.user_id)
            except Exception:
                user_data = None
            if user_data:
                for value in user_data.get('favorite_topics', []):
                    topic_key = self._map_topic_to_tip_key(value)
                    if topic_key:
                        topics.append(topic_key)

        ordered_topics: List[str] = []
        seen: Set[str] = set()
        for topic in topics:
            if not topic or topic not in self.PERSONAL_TIPS:
                continue
            if topic not in seen:
                seen.add(topic)
                ordered_topics.append(topic)

        if not ordered_topics:
            return response

        last_tip = getattr(user_context, 'last_tip_text', None) if user_context else None
        for topic in ordered_topics:
            tips = self.PERSONAL_TIPS.get(topic)
            if not tips:
                continue
            tip_choice = random.choice(tips)
            if last_tip and tip_choice == last_tip and len(tips) > 1:
                alternatives = [tip for tip in tips if tip != last_tip]
                if alternatives:
                    tip_choice = random.choice(alternatives)
            addition = f"üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ {self._tip_topic_label(topic)}:\n{tip_choice}"
            if addition in response:
                continue
            if user_context:
                setattr(user_context, 'last_tip_topic', topic)
                setattr(user_context, 'last_tip_text', tip_choice)
            return f"{response}\n\n{addition}"
        return response

    def _map_topic_to_tip_key(self, topic: str) -> Optional[str]:
        if not topic:
            return None
        normalized = topic.lower()
        mapping = {
            'python': 'python',
            'py': 'python',
            'javascript': 'javascript',
            'js': 'javascript',
            'ts': 'javascript',
            'typescript': 'javascript',
            'debugging': 'debugging',
            'debug': 'debugging',
            '–æ—à–∏–±–∫–∞': 'debugging',
            'learning': 'learning',
            'learning_basics': 'learning',
            '—É—á–∏—Ç—å': 'learning',
            'fastapi': 'fastapi',
            'telegram': 'telegram',
            '–±–æ—Ç': 'telegram',
            'tg': 'telegram',
        }
        for key, value in mapping.items():
            if key in normalized:
                return value
        return None

    def _tip_topic_label(self, topic_key: str) -> str:
        return self.TOPIC_LABELS.get(topic_key, topic_key)



    async def get_specialized_response(
        self,
        message: str,
        mode: str = "general",
        user_context=None,
        skill_level: str = "beginner",
        preferences: dict = None,
    ) -> Tuple[str, bool]:
        """Generate a reply for Telegram and flag whether it is a fallback."""
        follow_up = False
        try:
            if preferences is None:
                preferences = {}

            if user_context and hasattr(user_context, 'user_id'):
                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_context.user_id} (—É—Ä–æ–≤–µ–Ω—å: {skill_level})")

            message_lower = message.lower().strip()
            
            # Early truncation to keep answers compact
            max_rows = 10
            lines = message.splitlines()
            if len(lines) > max_rows:
                message = "\n".join(lines[:max_rows]) + "\n‚Ä¶"
                message_lower = message.lower().strip()

            small_talk_reply = self._match_small_talk(message_lower)
            if small_talk_reply:
                tone = self._detect_message_tone(message_lower)
                if tone:
                    small_talk_reply = self._augment_with_tone(small_talk_reply, tone)
                return small_talk_reply, False

            quick_responses = self._get_personalized_quick_responses(skill_level, preferences)
            follow_up_keywords = ("–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–¥–µ—Ç–∞–ª—å–Ω–µ–µ", "–ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–µ—â—ë", "–µ—â–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "tell me more", "more detail")
            if any(keyword in message_lower for keyword in follow_up_keywords):
                follow_up = True
            elif user_context and hasattr(user_context, 'history') and user_context.history:
                recent_user_messages = [entry['content'].lower().strip() for entry in reversed(user_context.history) if entry.get('role') == 'user']
                if recent_user_messages:
                    last_question = recent_user_messages[0]
                    if last_question == message_lower or (len(message_lower) > 12 and message_lower in last_question):
                        follow_up = True

            if follow_up and skill_level != 'advanced':
                skill_level = 'intermediate' if skill_level == 'beginner' else 'advanced'

            base_question = None
            previous_answer = None
            if user_context and hasattr(user_context, 'history') and user_context.history:
                for entry in reversed(user_context.history):
                    if entry.get('role') == 'assistant':
                        previous_answer = entry.get('content', '')
                        if previous_answer:
                            previous_answer = previous_answer.strip()
                        break
                for entry in reversed(user_context.history):
                    if entry.get('role') != 'user':
                        continue
                    prior_text = entry.get('content', '')
                    if not prior_text:
                        continue
                    normalized = prior_text.lower().strip()
                    if normalized == message_lower:
                        continue
                    if any(keyword in normalized for keyword in follow_up_keywords):
                        continue
                    if len(normalized.split()) <= 3:
                        continue
                    base_question = prior_text.strip()
                    break

            if message_lower in quick_responses and len(message_lower.split()) <= 3:
                response = quick_responses[message_lower]
                tone = self._detect_message_tone(message_lower)
                if tone:
                    response = self._augment_with_tone(response, tone)
                return response, False

            if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in message_lower:
                calc_example = ("–í–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Python:\n\n"
                                "```python\n"
                                "def calculator():\n"
                                "    operations = {\n"
                                "        '+': lambda a, b: a + b,\n"
                                "        '-': lambda a, b: a - b,\n"
                                "        '*': lambda a, b: a * b,\n"
                                "        '/': lambda a, b: a / b if b != 0 else '–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å'\n"
                                "    }\n\n"
                                "    op = input('–û–ø–µ—Ä–∞—Ü–∏—è (+, -, *, /): ').strip()\n"
                                "    a = float(input('–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: '))\n"
                                "    b = float(input('–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: '))\n\n"
                                "    if op not in operations:\n"
                                "        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'\n\n"
                                "    result = operations[op](a, b)\n"
                                "    return f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}'\n\n"
                                "if __name__ == '__main__':\n"
                                "    print(calculator())\n"
                                "```\n\n"
                                "–•–æ—á–µ—à—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –º–µ–Ω—é, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏–ª–∏ GUI ‚Äî —Å–∫–∞–∂–∏, –ø–æ–¥—Å–∫–∞–∂—É.")
                return calc_example, False

            if "–Ω–∞–π–¥–∏ –æ—à–∏–±–∫—É" in message_lower or "find error" in message_lower:
                analysis = await self._analyze_code_for_errors(message)
                return analysis, False

            if any(phrase in message_lower for phrase in
                   ["—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å", "–∫–∞–∫ –Ω–∞—á–∞—Ç—å", "–Ω–∞—á–∞—Ç—å —É—á–∏—Ç—å", "–Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å"]):
                advice = await self._get_learning_advice(message)
                return advice, False

            if "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π" in message_lower or "optimize" in message_lower:
                mode = "optimize_code"
            elif "–æ–±—ä—è—Å–Ω–∏" in message_lower or "explain" in message_lower:
                mode = "explain_concept"
            elif "–æ—à–∏–±–∫–∞" in message_lower or "debug" in message_lower:
                mode = "debug_code"
            elif "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä" in message_lower or "architecture" in message_lower:
                mode = "architecture_advice"
            elif "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π" in message_lower or "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π" in message_lower or "analyze" in message_lower:
                mode = "analyze_code"
            else:
                mode = "general"

            if "–æ–±—ä—è—Å–Ω–∏ —ç—Ç–æ—Ç –∫–æ–¥" in message_lower or "—á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥" in message_lower:
                explanation = await self.explain_code(message)
                return explanation, False

            if "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥" in message_lower or "analyze this code" in message_lower:
                explanation = await self.explain_code(message)
                return explanation, False

            # === –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Groq API ===
            if self.groq_client:
                try:
                    prompt = self._build_personalized_prompt(
                        message,
                        mode,
                        skill_level,
                        preferences,
                        follow_up=follow_up,
                        base_question=base_question,
                        previous_answer=previous_answer,
                    )
                    logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq (mode={mode}, level={skill_level}): {message[:50]}...")

                    messages = [{"role": "system", "content": SYSTEM_PROMPT}]

                    # Add conversation history if available
                    if user_context and hasattr(user_context, 'history') and user_context.history:
                        # Get last 6 messages (3 exchanges) for context
                        recent_history = user_context.get_recent_context(6)
                        for msg in recent_history:
                            if msg['role'] == 'user':
                                messages.append({"role": "user", "content": msg['content']})
                            elif msg['role'] == 'assistant':
                                messages.append({"role": "assistant", "content": msg['content']})

                    # Add current message
                    messages.append({"role": "user", "content": prompt})

                    response = await self.groq_client.chat.completions.create(
                        model=GROQ_MODEL,
                        messages=messages,
                        temperature=0.3,
                        max_tokens=1000,
                        timeout=15
                    )

                    if not response or not hasattr(response, "choices") or not response.choices:
                        logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Groq. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.")
                        return self._get_fallback_response(message, mode), True

                    choice = response.choices[0]
                    content = getattr(choice.message, "content", None) if hasattr(choice, "message") else None

                    if not content:
                        logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.")
                        return self._get_fallback_response(message, mode), True

                    ai_response = content.strip()
                    tone = self._detect_message_tone(message_lower)
                    if tone:
                        ai_response = self._augment_with_tone(ai_response, tone)
                    ai_response = self._maybe_add_personal_tip(ai_response, preferences, user_context, message_lower)
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Groq")
                    return self._format_for_telegram(ai_response), False

                except asyncio.TimeoutError:
                    logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq")
                    return "‚è∞ –ò–ò –¥–æ–ª–≥–æ –¥—É–º–∞–µ—Ç... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—á–µ.", True
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Groq: {e}")
                    return self._get_fallback_response(message, mode), True

            return self._get_fallback_response(message, mode), True

        except Exception as e:
            logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return self._get_fallback_response(message, mode), True

    async def _analyze_code_for_errors(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ –æ—à–∏–±–∫–∏"""
        code_match = re.search(r'\`\`\`[\w]*\n?(.*?)\n?\`\`\`', message, re.DOTALL)

        if code_match:
            code = code_match.group(1).strip()
        else:
            lowered = message.lower()
            if "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥" in lowered:
                code = message[lowered.index("–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥") + len("–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥"):].strip()
            elif "analyze code" in lowered:
                code = message[lowered.index("analyze code") + len("analyze code"):].strip()
            else:
                code = ""

        if not code:
            return "‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        if any(keyword in code.lower() for keyword in ['let', 'const', 'var', 'console.log', 'for(']):
            return self._analyze_javascript_errors(code)
        elif any(keyword in code for keyword in ['def ', 'print(', 'import ', 'for ']):
            return self._analyze_python_errors(code)
        elif "<div" in code.lower() or "<html" in code.lower() or "<h1>" in code.lower():
            return f"üîç **–ê–Ω–∞–ª–∏–∑ HTML –∫–æ–¥–∞:**\n\n\`\`\`html\n{code}\n\`\`\`\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞: —É `<div>` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Å–∏–º–≤–æ–ª `>`.\n‚úÖ –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ: `<div class=\"container\">`"
        else:
            return f"üîç **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:**\n\n\`\`\`\n{code}\n\`\`\`\n\n‚ùì –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."

    def _analyze_javascript_errors(self, code: str) -> str:
        errors = []
        suggestions = []
        if re.search(r'for\s*\(\s*i\s*=', code):
            errors.append("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è `i` –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç `let`, `const` –∏–ª–∏ `var`)")
            suggestions.append("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `let i = 0` –≤–º–µ—Å—Ç–æ `i = 0`")
        if 'var ' in code:
            suggestions.append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `let` –∏–ª–∏ `const` –≤–º–µ—Å—Ç–æ `var`")
        lines = code.split('\n')
        for line in lines:
            if line.strip() and not line.strip().endswith((';', '{', '}')):
                if any(keyword in line for keyword in ['console.log', 'let ', 'const ', 'var ']):
                    suggestions.append("üí° –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫")
                    break
        response = "üîç **–ê–Ω–∞–ª–∏–∑ JavaScript –∫–æ–¥–∞:**\n\n"
        response += f"\`\`\`javascript\n{code}\n\`\`\`\n\n"
        if errors:
            response += "üö® **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:**\n"
            for error in errors:
                response += f"{error}\n"
            response += "\n"
        if suggestions:
            response += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            for suggestion in suggestions:
                response += f"{suggestion}\n"
            response += "\n"
        fixed_code = code
        if re.search(r'for\s*\(\s*i\s*=', code):
            fixed_code = re.sub(r'for\s*\(\s*i\s*=', 'for(let i=', fixed_code)
        response += "‚úÖ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:**\n"
        response += f"\`\`\`javascript\n{fixed_code}\n\`\`\`"
        return response

    def _analyze_python_errors(self, code: str) -> str:
        response = "üîç **–ê–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞:**\n\n"
        response += f"\`\`\`python\n{code}\n\`\`\`\n\n"
        response += "‚úÖ –ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è Python"
        return response

    async def _get_learning_advice(self, message: str) -> str:
        return """üöÄ **–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?**

üìö **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—É—Ç—å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:**

**1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π —è–∑—ã–∫:**
‚Ä¢ **Python** - –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –º–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ **JavaScript** - –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ **Java** - –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

**2. –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –£—Å–ª–æ–≤–∏—è (if/else)
‚Ä¢ –¶–∏–∫–ª—ã (for/while)
‚Ä¢ –§—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ú–∞—Å—Å–∏–≤—ã/—Å–ø–∏—Å–∫–∏

**3. –ü—Ä–∞–∫—Ç–∏–∫–∞:**
‚Ä¢ –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –Ω–∞ Codewars, LeetCode
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ —á—É–∂–æ–π –∫–æ–¥

**4. –†–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**
‚Ä¢ **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:** freeCodeCamp, Codecademy
‚Ä¢ **–ö–Ω–∏–≥–∏:** "–ò–∑—É—á–∞–µ–º Python" –ú–∞—Ä–∫–∞ –õ—É—Ç—Ü–∞
‚Ä¢ **YouTube:** –∫–∞–Ω–∞–ª—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é

**5. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
‚Ä¢ –ò–∑—É—á–∏—Ç–µ Git –∏ GitHub
‚Ä¢ –û—Å–≤–æ–π—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQL)
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–≤–µ–±, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ò–ò)

üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –¥–∞–∂–µ –ø–æ 30 –º–∏–Ω—É—Ç!

ü§ù **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é: @vadzim_belarus"""

    async def explain_code(self, code: str) -> str:
        if not smart_features:
            return "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (smart_features –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω)."
        language = self._guess_language(code)
        analysis = smart_features.analyze_code_quality(code, language)
        human_explanation = self._generate_human_explanation(code, language)
        response = f"üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞\n\n"
        response += f"**–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —è–∑—ã–∫:** {language}\n\n"
        response += f"üìñ –°–º—ã—Å–ª –∫–æ–¥–∞:\n{human_explanation}\n\n"
        response += f"üìä –ú–µ—Ç—Ä–∏–∫–∏:\n"
        response += f"- –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {analysis['total_lines']}\n"
        response += f"- –ö–æ–¥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫: {analysis['code_lines']}\n"
        response += f"- –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {analysis['avg_line_length']:.1f}\n"
        response += f"- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity_score']}\n"
        response += f"- –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: {analysis['readability_score']:.1f}/10\n\n"
        if analysis['issues']:
            response += "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"
            for issue in analysis['issues']:
                response += f"- {issue['type']}: {issue['message']}\n"
            response += "\n"
        if analysis['suggestions']:
            response += "üí° –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n"
            for s in analysis['suggestions']:
                response += f"- {s}\n"
        return response.strip()

    def _generate_human_explanation(self, code: str, language: str) -> str:
        code_lower = code.lower()
        if language == "javascript":
            if "console.log" in code_lower:
                return "–≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞."
        if language == "python":
            if "print(" in code_lower:
                return "–≠—Ç–æ—Ç –∫–æ–¥ –ø–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å."
            if "for " in code_lower and "range(" in code_lower:
                return "–≠—Ç–æ—Ç —Ü–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏."
        if language == "java":
            if "system.out.println" in code_lower:
                return "–≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤ Java."
        if language == "html":
            if "<h1>" in code_lower:
                return "–≠—Ç–æ—Ç HTML-–∫–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ."
        if language == "sql":
            if "select" in code_lower:
                return "–≠—Ç–æ—Ç SQL-–∑–∞–ø—Ä–æ—Å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
        return "–ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."

    def _guess_language(self, code: str) -> str:
        code_lower = code.lower()
        if "def " in code or "print(" in code or "import " in code:
            return "python"
        if "function " in code_lower or "console.log(" in code_lower or "let " in code_lower:
            return "javascript"
        if "public static void main" in code_lower or "class " in code:
            return "java"
        if "<html" in code_lower or "<div" in code_lower or "</body>" in code_lower:
            return "html"
        if "select " in code_lower or "insert into" in code_lower or "create table" in code_lower:
            return "sql"
        return smart_features.detect_language_by_code(code) if smart_features else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    def _build_prompt(self, message: str, mode: str) -> str:
        mode_descriptions = {
            "analyze_code": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥. –í–µ—Å—å –∫–æ–¥ –æ—Ñ–æ—Ä–º–ª—è–π –≤ –û–î–ò–ù –±–ª–æ–∫ —Å \`\`\`—è–∑—ã–∫",
            "debug_code": "–ù–∞–π–¥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ. –í–µ—Å—å –∫–æ–¥ –æ—Ñ–æ—Ä–º–ª—è–π –≤ –û–î–ò–ù –±–ª–æ–∫ —Å \`\`\`—è–∑—ã–∫",
            "explain_concept": "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞. –ö–æ–¥ –≤ \`\`\`—è–∑—ã–∫",
            "optimize_code": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥. –í–µ—Å—å –∫–æ–¥ –æ—Ñ–æ—Ä–º–ª—è–π –≤ –û–î–ò–ù –±–ª–æ–∫ —Å \`\`\`—è–∑—ã–∫",
            "architecture_advice": "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ö–æ–¥ –≤ \`\`\`—è–∑—ã–∫",
            "general": "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –ö–æ–¥ –æ—Ñ–æ—Ä–º–ª—è–π –≤ \`\`\`—è–∑—ã–∫"
        }
        task = mode_descriptions.get(mode, mode_descriptions["general"])
        return f"{task}:\n\n{message}"

    def _format_for_telegram(self, text: str) -> str:
        if not text:
            return text
        code_blocks = re.findall(r'\`\`\`(\w+)?\s*(.*?)\`\`\`', text, re.DOTALL)
        if not code_blocks:
            return text
        formatted_text = text
        for lang, code in code_blocks:
            escaped_code = code.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
            if lang:
                telegram_code_block = f'\`\`\`{lang}\n{escaped_code}\n\`\`\`'
            else:
                telegram_code_block = f'\`\`\`\n{escaped_code}\n\`\`\`'
            original_block = f'\`\`\`{lang or ""}\n{code}\n\`\`\`'
            formatted_text = formatted_text.replace(original_block, telegram_code_block)
        return formatted_text

    def _get_fallback_response(self, message: str, mode: str) -> str:
        fallbacks = {
            "analyze_code": "–ù–µ —É–¥–∞–ª–æ—Å—å –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–¥. –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –µ—â—ë —Ä–∞–∑ –∏ —É—Ç–æ—á–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–º—É—â–∞–µ—Ç.",
            "debug_code": "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É. –ü—Ä–æ–≤–µ—Ä—å, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∏ –ø—Ä–∏—à–ª–∏ –ø—Ä–∏–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
            "explain_concept": "–ü–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –¥–µ—Ç–∞–ª–µ–π.",
            "optimize_code": "–°–µ–π—á–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å —Ü–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—Ä–æ—Å.",
            "architecture_advice": "–ù–µ —É—Å–ø–µ–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å–æ–≤–µ—Ç. –î–∞–π –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Å–ø—Ä–æ—Å–∏ –µ—â—ë —Ä–∞–∑.",
            "general": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–≤—Ç–æ—Ä–∏ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚Äî —è —É–∂–µ –≥–æ—Ç–æ–≤ —Å–Ω–æ–≤–∞ –ø–æ–º–æ—á—å."
        }
        return fallbacks.get(mode, fallbacks["general"])

    def _get_personalized_quick_responses(self, skill_level: str, preferences: dict) -> dict:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤"""
        base_responses = {
            '–ø—Ä–∏–≤–µ—Ç': """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ü–æ–º–æ—â–Ω–∏–∫ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞
üöÄ –°–æ–∑–¥–∞–Ω –í–∞–¥–∏–º–æ–º (vadzim.by)

üíª –ü–æ–º–æ–≥—É —Å:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –∏ –æ—Ç–ª–∞–¥–∫–æ–π –∫–æ–¥–∞
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –†–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º –∏ –æ—à–∏–±–æ–∫
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é

üéØ –Ø –∞–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è!
üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ - —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ

üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–¥!

‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
/about - –û —Å–æ–∑–¥–∞—Ç–µ–ª–µ

üëá –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:""",
            'hello': "Hello! üëã I'm Programming Assistant. Created by Vadim (vadzim.by)",
            'hi': "Hi there! üëã Programming Assistant here!",
            '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! üëã –ü–æ–º–æ—â–Ω–∏–∫ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!",
            '–∫–∞–∫ –¥–µ–ª–∞': "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! üòä –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º!",
            'how are you': "I'm great! üòä Ready to help with programming!",
            '—Å–∞–π—Ç': "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: –í–∞–¥–∏–º\nüåê –°–∞–π—Ç: vadzim.by\nüöÄ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–æ–≤ –∏ Telegram –±–æ—Ç–æ–≤",
            '–≤–∞–¥–∏–º': "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: –í–∞–¥–∏–º\nüåê –°–∞–π—Ç: vadzim.by\nüíª –°—Ç–µ–∫: Python, JavaScript, Django, React",
            'vadzim': "üë®‚Äçüíª Creator: Vadzim\nüåê Website: vadzim.by\nüíª Tech stack: Python, JavaScript, Django, React",
            '–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª': "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –í–∞–¥–∏–º (vadzim.by) - full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ë–µ–ª–∞—Ä—É—Å–∏ üöÄ",
            'who created you': "I was created by Vadzim (vadzim.by) - full-stack developer from Belarus üöÄ"
        }

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤
        if skill_level == "beginner":
            base_responses['–ø–æ–º–æ—â—å'] = "üéØ –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å Python! –•–æ—Ç–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è?"
            base_responses[
                'help'] = "üéØ For beginners, I recommend starting with Python! Want a step-by-step learning plan?"
        elif skill_level == "intermediate":
            base_responses[
                '–ø–æ–º–æ—â—å'] = "üí™ –û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ö–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ?"
            base_responses['help'] = "üí™ Great! Ready to help with more complex tasks. What project are you working on?"
        elif skill_level == "advanced":
            base_responses['–ø–æ–º–æ—â—å'] = "üöÄ –≠–∫—Å–ø–µ—Ä—Ç –≤ –¥–µ–ª–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏."
            base_responses['help'] = "üöÄ Expert level! Ready to discuss architecture, optimization and best practices."

        return base_responses

    def _build_personalized_prompt(
        self,
        message: str,
        mode: str,
        skill_level: str,
        preferences: dict,
        follow_up: bool = False,
        base_question: Optional[str] = None,
        previous_answer: Optional[str] = None,
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""

        # –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        mode_descriptions = {
            "analyze_code": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥",
            "debug_code": "–ù–∞–π–¥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ",
            "explain_concept": "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é",
            "optimize_code": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥",
            "architecture_advice": "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ",
            "general": "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"
        }

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤
        level_adjustments = {
            "beginner": {
                "analyze_code": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –æ–±—ä—è—Å–Ω–∏ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É",
                "debug_code": "–ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏ –∏ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∏ –∫–∞–∫ –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å",
                "explain_concept": "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏",
                "optimize_code": "–ü–æ–∫–∞–∂–∏ –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –∫–æ–¥ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª—É—á—à–µ",
                "architecture_advice": "–î–∞–π –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–¥–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
                "general": "–û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –¥–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤"
            },
            "intermediate": {
                "analyze_code": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥, —É–∫–∞–∂–∏ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è",
                "debug_code": "–ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "explain_concept": "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Å–ª—É—á–∞—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                "optimize_code": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥, –ø–æ–∫–∞–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã",
                "architecture_advice": "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏",
                "general": "–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏"
            },
            "advanced": {
                "analyze_code": "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                "debug_code": "–ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π root cause, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                "explain_concept": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏ edge cases",
                "optimize_code": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –ø–∞–º—è—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "architecture_advice": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ enterprise –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º",
                "general": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –≥–ª—É–±–æ–∫–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º"
            }
        }

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        task = level_adjustments.get(skill_level, {}).get(mode,
                                                          mode_descriptions.get(mode, mode_descriptions["general"]))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        preferred_language = preferences.get('language', '')
        if preferred_language:
            task += f". –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ {preferred_language}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        if follow_up:
            task += ". User already received a basic answer, so add new depth: advanced examples, best practices, common mistakes, and references for self-study"

        explanation_style = preferences.get('explanation_style', '')
        if explanation_style == 'detailed':
            task += ". –î–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
        elif explanation_style == 'concise':
            task += ". –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ –¥–µ–ª—É"

        task += ". Provide actionable next steps, add links to docs, format code in ```language``` and do not repeat previous explanations word for word"

        context_sections: List[str] = []
        if follow_up:
            context_sections.append("The user already received a basic answer earlier. Provide a deeper continuation: add advanced examples, highlight best practices, warn about common pitfalls, and suggest resources to study next.")
        if base_question:
            context_sections.append(f"Original question from the user: {base_question}")
        if previous_answer:
            trimmed_answer = previous_answer.strip()
            if len(trimmed_answer) > 800:
                trimmed_answer = trimmed_answer[:800] + '‚Ä¶'
            context_sections.append(f"Previous assistant answer (reference only, do not repeat): {trimmed_answer}")

        context_sections.append(f"Current user message: {message}")

        return f"{task}:\n\n" + "\n\n".join(context_sections) + "\n\n–ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–æ–≤—ã–µ –∏–¥–µ–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–≤–∏–Ω—É–ª—Å—è –¥–∞–ª—å—à–µ."


# –°–∏–Ω–≥–ª—Ç–æ–Ω
enhanced_ai_handler = EnhancedAIHandler()
