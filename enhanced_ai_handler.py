"""
Enhanced AI Handler - —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞ –¥–ª—è Telegram (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
"""

import asyncio
import logging
import re
from groq import AsyncGroq
from config import GROQ_API_KEY, GROQ_MODEL, SYSTEM_PROMPT

try:
    from smart_features import smart_features  # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    from database import user_db  # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
except ImportError:
    smart_features = None
    user_db = None

logger = logging.getLogger(__name__)


class EnhancedAIHandler:
    def __init__(self):
        self.groq_client = AsyncGroq(api_key=GROQ_API_KEY) if GROQ_API_KEY else None
        logger.info("ü§ñ EnhancedAIHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def get_specialized_response(self, message: str, mode: str = "general", user_context=None,
                                       skill_level: str = "beginner", preferences: dict = None) -> str:
        follow_up = False
        """–û—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞ –¥–ª—è Telegram"""
        try:
            if preferences is None:
                preferences = {}

            if user_context and hasattr(user_context, 'user_id'):
                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_context.user_id} (—É—Ä–æ–≤–µ–Ω—å: {skill_level})")

            quick_responses = self._get_personalized_quick_responses(skill_level, preferences)

            message_lower = message.lower().strip()

            follow_up_keywords = ("–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–¥–µ—Ç–∞–ª—å–Ω–µ–µ", "–ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–µ—â—ë", "–µ—â–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "tell me more", "more detail")
            if any(keyword in message_lower for keyword in follow_up_keywords):
                follow_up = True
            elif user_context and hasattr(user_context, 'history') and user_context.history:
                recent_user_messages = [entry['content'].lower().strip() for entry in reversed(user_context.history) if entry['role'] == 'user']
                if recent_user_messages:
                    last_question = recent_user_messages[0]
                    if last_question == message_lower or (len(message_lower) > 12 and message_lower in last_question):
                        follow_up = True

            if follow_up and skill_level != 'advanced':
                skill_level = 'intermediate' if skill_level == 'beginner' else 'advanced'
            if message_lower in quick_responses and len(message_lower.split()) <= 3:
                return quick_responses[message_lower]

            if "–Ω–∞–π–¥–∏ –æ—à–∏–±–∫—É" in message_lower or "find error" in message_lower:
                return await self._analyze_code_for_errors(message)

            if any(phrase in message_lower for phrase in
                   ["—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å", "–∫–∞–∫ –Ω–∞—á–∞—Ç—å", "–Ω–∞—á–∞—Ç—å —É—á–∏—Ç—å", "–Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å"]):
                return await self._get_learning_advice(message)

            if "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π" in message_lower or "optimize" in message_lower:
                mode = "optimize_code"
            elif "–æ–±—ä—è—Å–Ω–∏" in message_lower or "explain" in message_lower:
                mode = "explain_concept"
            elif "–æ—à–∏–±–∫–∞" in message_lower or "debug" in message_lower:
                mode = "debug_code"
            elif "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä" in message_lower or "architecture" in message_lower:
                mode = "architecture_advice"
            elif "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π" in message_lower or "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π" in message_lower or "analyze" in message_lower:
                mode = "analyze_code"
            else:
                mode = "general"

            if "–æ–±—ä—è—Å–Ω–∏ —ç—Ç–æ—Ç –∫–æ–¥" in message_lower or "—á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥" in message_lower:
                return await self.explain_code(message)

            if "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥" in message_lower or "analyze this code" in message_lower:
                return await self.explain_code(message)

            # === –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Groq API ===
            if self.groq_client:
                try:
                    prompt = self._build_personalized_prompt(message, mode, skill_level, preferences, follow_up=follow_up)
                    logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq (mode={mode}, level={skill_level}): {message[:50]}...")

                    messages = [{"role": "system", "content": SYSTEM_PROMPT}]

                    # Add conversation history if available
                    if user_context and hasattr(user_context, 'history') and user_context.history:
                        # Get last 6 messages (3 exchanges) for context
                        recent_history = user_context.get_recent_context(6)
                        for msg in recent_history:
                            if msg['role'] == 'user':
                                messages.append({"role": "user", "content": msg['content']})
                            elif msg['role'] == 'assistant':
                                messages.append({"role": "assistant", "content": msg['content']})

                    # Add current message
                    messages.append({"role": "user", "content": prompt})

                    response = await self.groq_client.chat.completions.create(
                        model=GROQ_MODEL,
                        messages=messages,
                        temperature=0.3,
                        max_tokens=1000,
                        timeout=15
                    )

                    if not response or not hasattr(response, "choices") or not response.choices:
                        logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Groq. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.")
                        return self._get_fallback_response(message, mode)

                    choice = response.choices[0]
                    content = getattr(choice.message, "content", None) if hasattr(choice, "message") else None

                    if not content:
                        logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.")
                        return self._get_fallback_response(message, mode)

                    ai_response = content.strip()
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Groq")
                    return self._format_for_telegram(ai_response)

                except asyncio.TimeoutError:
                    logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq")
                    return "‚è∞ –ò–ò –¥–æ–ª–≥–æ –¥—É–º–∞–µ—Ç... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—á–µ."
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Groq: {e}")
                    return self._get_fallback_response(message, mode)

            return self._get_fallback_response(message, mode)

        except Exception as e:
            logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return self._get_fallback_response(message, mode)

    async def _analyze_code_for_errors(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ –æ—à–∏–±–∫–∏"""
        code_match = re.search(r'\`\`\`[\w]*\n?(.*?)\n?\`\`\`', message, re.DOTALL)

        if code_match:
            code = code_match.group(1).strip()
        else:
            lowered = message.lower()
            if "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥" in lowered:
                code = message[lowered.index("–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥") + len("–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥"):].strip()
            elif "analyze code" in lowered:
                code = message[lowered.index("analyze code") + len("analyze code"):].strip()
            else:
                code = ""

        if not code:
            return "‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        if any(keyword in code.lower() for keyword in ['let', 'const', 'var', 'console.log', 'for(']):
            return self._analyze_javascript_errors(code)
        elif any(keyword in code for keyword in ['def ', 'print(', 'import ', 'for ']):
            return self._analyze_python_errors(code)
        elif "<div" in code.lower() or "<html" in code.lower() or "<h1>" in code.lower():
            return f"üîç **–ê–Ω–∞–ª–∏–∑ HTML –∫–æ–¥–∞:**\n\n\`\`\`html\n{code}\n\`\`\`\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞: —É `<div>` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Å–∏–º–≤–æ–ª `>`.\n‚úÖ –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ: `<div class=\"container\">`"
        else:
            return f"üîç **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:**\n\n\`\`\`\n{code}\n\`\`\`\n\n‚ùì –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."

    def _analyze_javascript_errors(self, code: str) -> str:
        errors = []
        suggestions = []
        if re.search(r'for\s*\(\s*i\s*=', code):
            errors.append("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è `i` –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç `let`, `const` –∏–ª–∏ `var`)")
            suggestions.append("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `let i = 0` –≤–º–µ—Å—Ç–æ `i = 0`")
        if 'var ' in code:
            suggestions.append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `let` –∏–ª–∏ `const` –≤–º–µ—Å—Ç–æ `var`")
        lines = code.split('\n')
        for line in lines:
            if line.strip() and not line.strip().endswith((';', '{', '}')):
                if any(keyword in line for keyword in ['console.log', 'let ', 'const ', 'var ']):
                    suggestions.append("üí° –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫")
                    break
        response = "üîç **–ê–Ω–∞–ª–∏–∑ JavaScript –∫–æ–¥–∞:**\n\n"
        response += f"\`\`\`javascript\n{code}\n\`\`\`\n\n"
        if errors:
            response += "üö® **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:**\n"
            for error in errors:
                response += f"{error}\n"
            response += "\n"
        if suggestions:
            response += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            for suggestion in suggestions:
                response += f"{suggestion}\n"
            response += "\n"
        fixed_code = code
        if re.search(r'for\s*\(\s*i\s*=', code):
            fixed_code = re.sub(r'for\s*\(\s*i\s*=', 'for(let i=', fixed_code)
        response += "‚úÖ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:**\n"
        response += f"\`\`\`javascript\n{fixed_code}\n\`\`\`"
        return response

    def _analyze_python_errors(self, code: str) -> str:
        response = "üîç **–ê–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞:**\n\n"
        response += f"\`\`\`python\n{code}\n\`\`\`\n\n"
        response += "‚úÖ –ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è Python"
        return response

    async def _get_learning_advice(self, message: str) -> str:
        return """üöÄ **–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?**

üìö **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—É—Ç—å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:**

**1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π —è–∑—ã–∫:**
‚Ä¢ **Python** - –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –º–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ **JavaScript** - –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ **Java** - –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

**2. –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –£—Å–ª–æ–≤–∏—è (if/else)
‚Ä¢ –¶–∏–∫–ª—ã (for/while)
‚Ä¢ –§—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ú–∞—Å—Å–∏–≤—ã/—Å–ø–∏—Å–∫–∏

**3. –ü—Ä–∞–∫—Ç–∏–∫–∞:**
‚Ä¢ –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –Ω–∞ Codewars, LeetCode
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ —á—É–∂–æ–π –∫–æ–¥

**4. –†–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**
‚Ä¢ **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:** freeCodeCamp, Codecademy
‚Ä¢ **–ö–Ω–∏–≥–∏:** "–ò–∑—É—á–∞–µ–º Python" –ú–∞—Ä–∫–∞ –õ—É—Ç—Ü–∞
‚Ä¢ **YouTube:** –∫–∞–Ω–∞–ª—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é

**5. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
‚Ä¢ –ò–∑—É—á–∏—Ç–µ Git –∏ GitHub
‚Ä¢ –û—Å–≤–æ–π—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQL)
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–≤–µ–±, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ò–ò)

üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –¥–∞–∂–µ –ø–æ 30 –º–∏–Ω—É—Ç!

ü§ù **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é: @vadzim_belarus"""

    async def explain_code(self, code: str) -> str:
        if not smart_features:
            return "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (smart_features –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω)."
        language = self._guess_language(code)
        analysis = smart_features.analyze_code_quality(code, language)
        human_explanation = self._generate_human_explanation(code, language)
        response = f"üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞\n\n"
        response += f"**–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —è–∑—ã–∫:** {language}\n\n"
        response += f"üìñ –°–º—ã—Å–ª –∫–æ–¥–∞:\n{human_explanation}\n\n"
        response += f"üìä –ú–µ—Ç—Ä–∏–∫–∏:\n"
        response += f"- –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {analysis['total_lines']}\n"
        response += f"- –ö–æ–¥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫: {analysis['code_lines']}\n"
        response += f"- –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {analysis['avg_line_length']:.1f}\n"
        response += f"- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity_score']}\n"
        response += f"- –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: {analysis['readability_score']:.1f}/10\n\n"
        if analysis['issues']:
            response += "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"
            for issue in analysis['issues']:
                response += f"- {issue['type']}: {issue['message']}\n"
            response += "\n"
        if analysis['suggestions']:
            response += "üí° –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n"
            for s in analysis['suggestions']:
                response += f"- {s}\n"
        return response.strip()

    def _generate_human_explanation(self, code: str, language: str) -> str:
        code_lower = code.lower()
        if language == "javascript":
            if "console.log" in code_lower:
                return "–≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞."
        if language == "python":
            if "print(" in code_lower:
                return "–≠—Ç–æ—Ç –∫–æ–¥ –ø–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å."
            if "for " in code_lower and "range(" in code_lower:
                return "–≠—Ç–æ—Ç —Ü–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏."
        if language == "java":
            if "system.out.println" in code_lower:
                return "–≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤ Java."
        if language == "html":
            if "<h1>" in code_lower:
                return "–≠—Ç–æ—Ç HTML-–∫–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ."
        if language == "sql":
            if "select" in code_lower:
                return "–≠—Ç–æ—Ç SQL-–∑–∞–ø—Ä–æ—Å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
        return "–ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."

    def _guess_language(self, code: str) -> str:
        code_lower = code.lower()
        if "def " in code or "print(" in code or "import " in code:
            return "python"
        if "function " in code_lower or "console.log(" in code_lower or "let " in code_lower:
            return "javascript"
        if "public static void main" in code_lower or "class " in code:
            return "java"
        if "<html" in code_lower or "<div" in code_lower or "</body>" in code_lower:
            return "html"
        if "select " in code_lower or "insert into" in code_lower or "create table" in code_lower:
            return "sql"
        return smart_features.detect_language_by_code(code) if smart_features else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    def _build_prompt(self, message: str, mode: str) -> str:
        mode_descriptions = {
            "analyze_code": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥. –í–µ—Å—å –∫–æ–¥ –æ—Ñ–æ—Ä–º–ª—è–π –≤ –û–î–ò–ù –±–ª–æ–∫ —Å \`\`\`—è–∑—ã–∫",
            "debug_code": "–ù–∞–π–¥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ. –í–µ—Å—å –∫–æ–¥ –æ—Ñ–æ—Ä–º–ª—è–π –≤ –û–î–ò–ù –±–ª–æ–∫ —Å \`\`\`—è–∑—ã–∫",
            "explain_concept": "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞. –ö–æ–¥ –≤ \`\`\`—è–∑—ã–∫",
            "optimize_code": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥. –í–µ—Å—å –∫–æ–¥ –æ—Ñ–æ—Ä–º–ª—è–π –≤ –û–î–ò–ù –±–ª–æ–∫ —Å \`\`\`—è–∑—ã–∫",
            "architecture_advice": "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ö–æ–¥ –≤ \`\`\`—è–∑—ã–∫",
            "general": "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –ö–æ–¥ –æ—Ñ–æ—Ä–º–ª—è–π –≤ \`\`\`—è–∑—ã–∫"
        }
        task = mode_descriptions.get(mode, mode_descriptions["general"])
        return f"{task}:\n\n{message}"

    def _format_for_telegram(self, text: str) -> str:
        if not text:
            return text
        code_blocks = re.findall(r'\`\`\`(\w+)?\s*(.*?)\`\`\`', text, re.DOTALL)
        if not code_blocks:
            return text
        formatted_text = text
        for lang, code in code_blocks:
            escaped_code = code.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
            if lang:
                telegram_code_block = f'\`\`\`{lang}\n{escaped_code}\n\`\`\`'
            else:
                telegram_code_block = f'\`\`\`\n{escaped_code}\n\`\`\`'
            original_block = f'\`\`\`{lang or ""}\n{code}\n\`\`\`'
            formatted_text = formatted_text.replace(original_block, telegram_code_block)
        return formatted_text

    def _get_fallback_response(self, message: str, mode: str) -> str:
        fallbacks = {
            "analyze_code": "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞\n\n\`\`\`python\n# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏–Ω—Ç–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã\n\`\`\`",
            "debug_code": "üêõ –û—Ç–ª–∞–¥–∫–∞\n\n\`\`\`python\nprint('–ó–Ω–∞—á–µ–Ω–∏–µ:', var)\nimport pdb; pdb.set_trace()\n\`\`\`",
            "explain_concept": f"üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n\n'{message[:50]}...'\n\n\`\`\`python\nclass Example:\n    pass\n\`\`\`",
            "optimize_code": "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞\n\n\`\`\`python\nnumbers = [i for i in range(1000)]\n\`\`\`",
            "architecture_advice": "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n\`\`\`python\n# MVC, Clean Architecture\n\`\`\`",
            "general": f"ü§ñ –í–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é\n\n'{message[:50]}...'\n\n\`\`\`python\nprint('Hello, world!')\n\`\`\`"
        }
        return fallbacks.get(mode, fallbacks["general"])

    def _get_personalized_quick_responses(self, skill_level: str, preferences: dict) -> dict:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤"""
        base_responses = {
            '–ø—Ä–∏–≤–µ—Ç': """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ü–æ–º–æ—â–Ω–∏–∫ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞
üöÄ –°–æ–∑–¥–∞–Ω –í–∞–¥–∏–º–æ–º (vadzim.by)

üíª –ü–æ–º–æ–≥—É —Å:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –∏ –æ—Ç–ª–∞–¥–∫–æ–π –∫–æ–¥–∞
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –†–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º –∏ –æ—à–∏–±–æ–∫
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é

üéØ –Ø –∞–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è!
üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ - —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ

üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–¥!

‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
/about - –û —Å–æ–∑–¥–∞—Ç–µ–ª–µ

üëá –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:""",
            'hello': "Hello! üëã I'm Programming Assistant. Created by Vadim (vadzim.by)",
            'hi': "Hi there! üëã Programming Assistant here!",
            '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! üëã –ü–æ–º–æ—â–Ω–∏–∫ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!",
            '–∫–∞–∫ –¥–µ–ª–∞': "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! üòä –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º!",
            'how are you': "I'm great! üòä Ready to help with programming!",
            '—Å–∞–π—Ç': "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: –í–∞–¥–∏–º\nüåê –°–∞–π—Ç: vadzim.by\nüöÄ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–æ–≤ –∏ Telegram –±–æ—Ç–æ–≤",
            '–≤–∞–¥–∏–º': "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: –í–∞–¥–∏–º\nüåê –°–∞–π—Ç: vadzim.by\nüíª –°—Ç–µ–∫: Python, JavaScript, Django, React",
            'vadzim': "üë®‚Äçüíª Creator: Vadzim\nüåê Website: vadzim.by\nüíª Tech stack: Python, JavaScript, Django, React",
            '–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª': "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –í–∞–¥–∏–º (vadzim.by) - full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ë–µ–ª–∞—Ä—É—Å–∏ üöÄ",
            'who created you': "I was created by Vadzim (vadzim.by) - full-stack developer from Belarus üöÄ"
        }

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤
        if skill_level == "beginner":
            base_responses['–ø–æ–º–æ—â—å'] = "üéØ –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å Python! –•–æ—Ç–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è?"
            base_responses[
                'help'] = "üéØ For beginners, I recommend starting with Python! Want a step-by-step learning plan?"
        elif skill_level == "intermediate":
            base_responses[
                '–ø–æ–º–æ—â—å'] = "üí™ –û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ö–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ?"
            base_responses['help'] = "üí™ Great! Ready to help with more complex tasks. What project are you working on?"
        elif skill_level == "advanced":
            base_responses['–ø–æ–º–æ—â—å'] = "üöÄ –≠–∫—Å–ø–µ—Ä—Ç –≤ –¥–µ–ª–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏."
            base_responses['help'] = "üöÄ Expert level! Ready to discuss architecture, optimization and best practices."

        return base_responses

    def _build_personalized_prompt(self, message: str, mode: str, skill_level: str, preferences: dict, follow_up: bool = False) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""

        # –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        mode_descriptions = {
            "analyze_code": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥",
            "debug_code": "–ù–∞–π–¥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ",
            "explain_concept": "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é",
            "optimize_code": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥",
            "architecture_advice": "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ",
            "general": "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"
        }

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤
        level_adjustments = {
            "beginner": {
                "analyze_code": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –æ–±—ä—è—Å–Ω–∏ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É",
                "debug_code": "–ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏ –∏ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∏ –∫–∞–∫ –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å",
                "explain_concept": "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏",
                "optimize_code": "–ü–æ–∫–∞–∂–∏ –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –∫–æ–¥ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª—É—á—à–µ",
                "architecture_advice": "–î–∞–π –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–¥–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
                "general": "–û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –¥–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤"
            },
            "intermediate": {
                "analyze_code": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥, —É–∫–∞–∂–∏ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è",
                "debug_code": "–ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "explain_concept": "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Å–ª—É—á–∞—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                "optimize_code": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥, –ø–æ–∫–∞–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã",
                "architecture_advice": "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏",
                "general": "–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏"
            },
            "advanced": {
                "analyze_code": "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                "debug_code": "–ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π root cause, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                "explain_concept": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏ edge cases",
                "optimize_code": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –ø–∞–º—è—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "architecture_advice": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ enterprise –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º",
                "general": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –≥–ª—É–±–æ–∫–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º"
            }
        }

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        task = level_adjustments.get(skill_level, {}).get(mode,
                                                          mode_descriptions.get(mode, mode_descriptions["general"]))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        preferred_language = preferences.get('language', '')
        if preferred_language:
            task += f". –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ {preferred_language}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        if follow_up:
            task += ". User already received a basic answer, so add new depth: advanced examples, best practices, common mistakes, and references for self-study"

        explanation_style = preferences.get('explanation_style', '')
        if explanation_style == 'detailed':
            task += ". –î–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
        elif explanation_style == 'concise':
            task += ". –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ –¥–µ–ª—É"

        task += ". Provide actionable next steps, add links to docs, format code in ```language``` and do not repeat previous explanations word for word"
        return f"{task}:\n\n{message}"



# –°–∏–Ω–≥–ª—Ç–æ–Ω
enhanced_ai_handler = EnhancedAIHandler()
