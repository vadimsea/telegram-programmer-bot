#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è API
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_models.py
"""

import asyncio
import aiohttp
import json
from config import (
    GROQ_API_URL, GROQ_API_KEY,
    HUGGING_FACE_API_URL, HUGGING_FACE_TOKEN,
    SYSTEM_PROMPT
)

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Groq –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
GROQ_MODELS = [
    "llama3.1-8b-8192",
    "llama3.1-70b-8192", 
    "openai/gpt-oss-20b",
    "mixtral-8x7b-32768",
    "llama3.1-8b-8192"
]

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π HuggingFace –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
HF_MODELS = [
    "microsoft/DialoGPT-medium",
    "gpt2",
    "distilgpt2",
    "microsoft/DialoGPT-small",
    "EleutherAI/gpt-neo-125M"
]

async def test_groq_model(session, model_name):
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Groq"""
    try:
        headers = {
            "Authorization": f"Bearer {GROQ_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": model_name,
            "messages": [
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ."},
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}
            ],
            "max_tokens": 50,
            "temperature": 0.7
        }
        
        async with session.post(GROQ_API_URL, headers=headers, json=payload, timeout=10) as response:
            if response.status == 200:
                return True, f"‚úÖ {model_name} - –†–ê–ë–û–¢–ê–ï–¢"
            else:
                error_text = await response.text()
                return False, f"‚ùå {model_name} - –û—à–∏–±–∫–∞ {response.status}: {error_text[:100]}"
                
    except Exception as e:
        return False, f"‚ùå {model_name} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"

async def test_hf_model(session, model_url):
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ HuggingFace"""
    try:
        headers = {
            "Authorization": f"Bearer {HUGGING_FACE_TOKEN}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "inputs": "–ü—Ä–∏–≤–µ—Ç",
            "parameters": {
                "max_length": 50,
                "temperature": 0.7,
                "do_sample": True
            }
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –º–æ–¥–µ–ª–∏
        full_url = f"https://api-inference.huggingface.co/models/{model_url}"
        
        async with session.post(full_url, headers=headers, json=payload, timeout=10) as response:
            if response.status == 200:
                return True, f"‚úÖ {model_url} - –†–ê–ë–û–¢–ê–ï–¢"
            else:
                error_text = await response.text()
                return False, f"‚ùå {model_url} - –û—à–∏–±–∫–∞ {response.status}: {error_text[:100]}"
                
    except Exception as e:
        return False, f"‚ùå {model_url} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–µ–π API")
    print("=" * 60)
    
    async with aiohttp.ClientSession() as session:
        
        # –¢–µ—Å—Ç Groq –º–æ–¥–µ–ª–µ–π
        print("\nüß™ –¢–ï–°–¢–ò–†–£–Æ GROQ –ú–û–î–ï–õ–ò:")
        print("-" * 40)
        
        groq_working = []
        for model in GROQ_MODELS:
            success, message = await test_groq_model(session, model)
            print(message)
            if success:
                groq_working.append(model)
        
        # –¢–µ—Å—Ç HuggingFace –º–æ–¥–µ–ª–µ–π
        print("\nüß™ –¢–ï–°–¢–ò–†–£–Æ HUGGINGFACE –ú–û–î–ï–õ–ò:")
        print("-" * 40)
        
        hf_working = []
        for model in HF_MODELS:
            success, message = await test_hf_model(session, model)
            print(message)
            if success:
                hf_working.append(model)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"Groq: {len(groq_working)}/{len(GROQ_MODELS)} –º–æ–¥–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç")
        print(f"HuggingFace: {len(hf_working)}/{len(HF_MODELS)} –º–æ–¥–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        if groq_working:
            print(f"\n‚úÖ –†–ê–ë–û–ß–ò–ï GROQ –ú–û–î–ï–õ–ò:")
            for model in groq_working:
                print(f"   ‚Ä¢ {model}")
        
        if hf_working:
            print(f"\n‚úÖ –†–ê–ë–û–ß–ò–ï HUGGINGFACE –ú–û–î–ï–õ–ò:")
            for model in hf_working:
                print(f"   ‚Ä¢ {model}")
        
        if not groq_working and not hf_working:
            print("\nüö® –ù–ò –û–î–ù–ê –ú–û–î–ï–õ–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤")
        
        print("\nüí° –ü–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –º–æ–¥–µ–ª–µ–π –æ–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥!")

if __name__ == "__main__":
    asyncio.run(main())
