"""
–£–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import re
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class SmartFeatures:
    """–ù–∞–±–æ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –±–æ—Ç–∞"""

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
    PROGRAMMING_LANGUAGES = {
        'python': ['python', 'py', '–ø–∏—Ç–æ–Ω', '–ø–∞–π—Ç–æ–Ω'],
        'javascript': ['javascript', 'js', '–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç', 'node'],
        'typescript': ['typescript', 'ts', '—Ç–∞–π–ø—Å–∫—Ä–∏–ø—Ç'],
        'java': ['java', '–¥–∂–∞–≤–∞'],
        'cpp': ['c++', 'cpp', 'c plus plus', '—Å–∏ –ø–ª—é—Å –ø–ª—é—Å'],
        'c': ['c', '—Å–∏'],
        'rust': ['rust', '—Ä–∞—Å—Ç'],
        'go': ['go', 'golang', '–≥–æ—É'],
        'php': ['php', '–ø—Ö–ø'],
        'ruby': ['ruby', '—Ä—É–±–∏'],
        'swift': ['swift', '—Å–≤–∏—Ñ—Ç'],
        'kotlin': ['kotlin', '–∫–æ—Ç–ª–∏–Ω'],
        'sql': ['sql', 'mysql', 'postgresql', 'sqlite'],
        'html': ['html', '—Ö—Ç–º–ª'],
        'css': ['css', '—Å—Ç–∏–ª–∏'],
        'bash': ['bash', 'shell', 'terminal', '—Ç–µ—Ä–º–∏–Ω–∞–ª']
    }

    def detect_language_by_code(self, code: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É"""
        text_lower = code.lower()

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Å–ª–æ–≤–∞—Ä—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for lang, keywords in self.PROGRAMMING_LANGUAGES.items():
            if any(keyword in text_lower for keyword in keywords):
                return lang

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
        if re.search(r"def\s+\w+\s*\(", code) and ":" in code:
            return "python"
        elif re.search(r"function\s+\w+\s*\(", code) and "{" in code:
            return "javascript"
        elif re.search(r"public\s+class\s+\w+", code):
            return "java"
        elif "#include" in code:
            return "cpp"
        elif re.search(r"SELECT\s+.*\s+FROM", code, re.IGNORECASE):
            return "sql"

        return None

    def analyze_code_quality(self, code: str, language: str) -> Dict[str, any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        lines = code.split("\n")
        non_empty_lines = [l for l in lines if l.strip()]

        metrics = {
            "total_lines": len(lines),
            "code_lines": len(non_empty_lines),
            "avg_line_length": sum(len(l) for l in non_empty_lines) / max(1, len(non_empty_lines)),
            "functions": len(re.findall(r"def\s+\w+|function\s+\w+", code)),
            "classes": len(re.findall(r"class\s+\w+", code)),
            "comments": len(re.findall(r"#.*|//.*|/\*.*?\*/", code)),
            "complexity_score": 0,
            "readability_score": 10.0,
            "issues": [],
            "suggestions": []
        }

        # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        for kw in ["if", "for", "while", "try", "catch", "switch"]:
            metrics["complexity_score"] += len(re.findall(rf"\b{kw}\b", code))

        # –û—Ü–µ–Ω–∫–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if metrics["avg_line_length"] > 120:
            metrics["readability_score"] -= 2

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if metrics["total_lines"] > 100:
            metrics["issues"].append({
                "type": "warning",
                "message": "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ‚Äî —Å—Ç–æ–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –º–æ–¥—É–ª–∏"
            })

        if language == "python":
            if re.search(r"except\s*:", code):
                metrics["issues"].append({
                    "type": "error",
                    "message": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ–ª—ã–π except ‚Äî –ª—É—á—à–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
                })
            if "import *" in code:
                metrics["suggestions"].append("‚ö†Ô∏è –ò–∑–±–µ–≥–∞–π import * ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ")
            if "def " in code and not re.search(r'""".*?"""', code, re.DOTALL):
                metrics["suggestions"].append("üìù –î–æ–±–∞–≤—å docstring –∫ —Ñ—É–Ω–∫—Ü–∏—è–º")

        if language == "javascript":
            if "var " in code:
                metrics["suggestions"].append("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π let/const –≤–º–µ—Å—Ç–æ var")
            if "==" in code and "===" not in code:
                metrics["suggestions"].append("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π === –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

        return metrics


# –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
smart_features = SmartFeatures()
